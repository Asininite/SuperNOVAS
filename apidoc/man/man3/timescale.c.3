.TH "src/timescale.c" 3 "Version v1.2" "SuperNOVAS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/timescale.c
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB_DEFAULT_SOURCE\fP"
.br
.RI "strcasecmp() feature macro starting glibc 2\&.20 (2014-09-08) "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "double \fBnovas_diff_tcb\fP (const \fBnovas_timespec\fP *t1, const \fBnovas_timespec\fP *t2)"
.br
.ti -1c
.RI "double \fBnovas_diff_tcg\fP (const \fBnovas_timespec\fP *t1, const \fBnovas_timespec\fP *t2)"
.br
.ti -1c
.RI "double \fBnovas_diff_time\fP (const \fBnovas_timespec\fP *t1, const \fBnovas_timespec\fP *t2)"
.br
.ti -1c
.RI "double \fBnovas_get_split_time\fP (const \fBnovas_timespec\fP *time, enum \fBnovas_timescale\fP timescale, long *ijd)"
.br
.ti -1c
.RI "double \fBnovas_get_time\fP (const \fBnovas_timespec\fP *time, enum \fBnovas_timescale\fP timescale)"
.br
.ti -1c
.RI "time_t \fBnovas_get_unix_time\fP (const \fBnovas_timespec\fP *time, long *nanos)"
.br
.ti -1c
.RI "int \fBnovas_iso_timestamp\fP (const \fBnovas_timespec\fP *time, char *dst, int maxlen)"
.br
.ti -1c
.RI "int \fBnovas_offset_time\fP (const \fBnovas_timespec\fP *time, double seconds, \fBnovas_timespec\fP *out)"
.br
.ti -1c
.RI "double \fBnovas_parse_date\fP (const char *date, char **tail)"
.br
.ti -1c
.RI "double \fBnovas_parse_date_format\fP (enum \fBnovas_calendar_type\fP calendar, enum \fBnovas_date_format\fP format, const char *date, char **tail)"
.br
.ti -1c
.RI "int \fBnovas_print_timescale\fP (enum \fBnovas_timescale\fP scale, char *buf)"
.br
.ti -1c
.RI "int \fBnovas_set_split_time\fP (enum \fBnovas_timescale\fP timescale, long ijd, double fjd, int leap, double dut1, \fBnovas_timespec\fP *time)"
.br
.ti -1c
.RI "int \fBnovas_set_time\fP (enum \fBnovas_timescale\fP timescale, double jd, int leap, double dut1, \fBnovas_timespec\fP *time)"
.br
.ti -1c
.RI "int \fBnovas_set_unix_time\fP (time_t unix_time, long nanos, int leap, double dut1, \fBnovas_timespec\fP *time)"
.br
.ti -1c
.RI "enum \fBnovas_timescale\fP \fBnovas_timescale_for_string\fP (const char *str)"
.br
.ti -1c
.RI "int \fBnovas_timestamp\fP (const \fBnovas_timespec\fP *time, enum \fBnovas_timescale\fP scale, char *dst, int maxlen)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBDate\fP
.RS 4
Created on Jun 24, 2024 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP
\fBSince\fP
.RS 4
1\&.1
.RE
.PP
A set of SuperNOVAS routines to make handling of astronomical timescales and conversions among them easier\&.
.PP
\fBSee also\fP
.RS 4
\fBframes\&.c\fP 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "double novas_diff_tcb (const \fBnovas_timespec\fP * t1, const \fBnovas_timespec\fP * t2)"
Returns the Barycentric Coordinate Time (TCB) based time difference (t1 - t2) in days between two astronomical time specifications\&. TCB progresses slightly faster than time on Earth, at a rate about 1\&.6&times10\*{-8\*}  higher, due to the lack of gravitational time dilation by the Earth or Sun\&.
.PP
\fBParameters\fP
.RS 4
\fIt1\fP First time 
.br
\fIt2\fP Second time 
.RE
.PP
\fBReturns\fP
.RS 4
[s] Precise TCB time difference (t1-t2), or NAN if one of the inputs was NULL (errno will be set to EINVAL)
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_diff_tcg()\fP 
.PP
\fBnovas_diff_time()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBnovas_diff_time()\fP\&.
.SS "double novas_diff_tcg (const \fBnovas_timespec\fP * t1, const \fBnovas_timespec\fP * t2)"
Returns the Geocentric Coordinate Time (TCG) based time difference (t1 - t2) in days between two astronomical time specifications\&. TCG progresses slightly faster than time on Earth, at a rate about 7&times10\*{-10\*}  higher, due to the lack of gravitational time dilation by Earth\&. TCG is an appropriate time measure for a spacecraft that is in the proximity of the orbit of Earth, but far enough from Earth such that the relativistic effects of Earth's gravity can be ignored\&.
.PP
\fBParameters\fP
.RS 4
\fIt1\fP First time 
.br
\fIt2\fP Second time 
.RE
.PP
\fBReturns\fP
.RS 4
[s] Precise TCG time difference (t1-t2), or NAN if one of the inputs was NULL (errno will be set to EINVAL)
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_diff_tcb()\fP 
.PP
\fBnovas_diff_time()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBnovas_diff_time()\fP\&.
.SS "double novas_diff_time (const \fBnovas_timespec\fP * t1, const \fBnovas_timespec\fP * t2)"
Returns the Terrestrial Time (TT) based time difference (t1 - t2) in days between two astronomical time specifications\&.
.PP
\fBParameters\fP
.RS 4
\fIt1\fP First time 
.br
\fIt2\fP Second time 
.RE
.PP
\fBReturns\fP
.RS 4
[s] Precise time difference (t1-t2), or NAN if one of the inputs was NULL (errno will be set to EINVAL)
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_set_time()\fP 
.PP
\fBnovas_offset_time()\fP 
.PP
\fBnovas_diff_tcb()\fP 
.PP
\fBnovas_diff_tcg()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBnovas_timespec::fjd_tt\fP, and \fBnovas_timespec::ijd_tt\fP\&.
.SS "double novas_get_split_time (const \fBnovas_timespec\fP * time, enum \fBnovas_timescale\fP timescale, long * ijd)"
Returns the fractional Julian date of an astronomical time in the specified timescale, as an integer and fractional part\&. The two-component split of the time allows for absolute precisions at the picosecond level, as opposed to \fC\fBnovas_set_time()\fP\fP, whose precision is limited to a few microseconds typically\&.
.PP
The accuracy of Barycentric Time measures (TDB and TCB) relative to other time measures is limited by the precision of the \fCtbd2tt()\fP implemenation, to around 10 s\&.
.PP
REFERENCES: 
.PD 0
.IP "1." 4
IAU 1991, RECOMMENDATION III\&. XXIst General Assembly of the International Astronomical Union\&. Retrieved 6 June 2019\&. 
.IP "2." 4
IAU 2006 resolution 3, see Recommendation and footnotes, note 3\&. 
.IP "3." 4
Fairhead, L\&. & Bretagnon, P\&. (1990) Astron\&. & Astrophys\&. 229, 240\&. 
.IP "4." 4
Kaplan, G\&. (2005), US Naval Observatory Circular 179\&. 
.IP "5." 4
\fChttps://naif\&.jpl\&.nasa\&.gov/pub/naif/toolkit_docs/FORTRAN/req/time\&.html\fP 
.IP "6." 4
\fChttps://gssc\&.esa\&.int/navipedia/index\&.php/Transformations_between_Time_Systems\fP 
.PP
.PP
\fBParameters\fP
.RS 4
\fItime\fP Pointer to the astronomical time specification data structure\&. 
.br
\fItimescale\fP The astronomical time scale in which the returned Julian Date is to be provided 
.br
\fIijd\fP [day] The integer part of the Julian date in the requested timescale\&. It may be NULL if not required\&. 
.RE
.PP
\fBReturns\fP
.RS 4
[day] The fractional part of the Julian date in the requested timescale or NAN is the time argument is NULL (ijd will be set to -1 also)\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_set_split_time()\fP 
.PP
\fBnovas_get_time()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBnovas_timespec::dut1\fP, \fBnovas_timespec::fjd_tt\fP, \fBnovas_timespec::ijd_tt\fP, \fBNOVAS_GPS\fP, \fBNOVAS_TAI\fP, \fBNOVAS_TCB\fP, \fBNOVAS_TCG\fP, \fBNOVAS_TDB\fP, \fBNOVAS_TT\fP, \fBNOVAS_UT1\fP, \fBNOVAS_UTC\fP, \fBnovas_timespec::tt2tdb\fP, and \fBnovas_timespec::ut1_to_tt\fP\&.
.SS "double novas_get_time (const \fBnovas_timespec\fP * time, enum \fBnovas_timescale\fP timescale)"
Returns the fractional Julian date of an astronomical time in the specified timescale\&. The returned time is accurate to a few s (microsecond) due to the inherent precision of the double-precision result\&. For higher precision applications you may use \fC\fBnovas_get_split_time()\fP\fP instead, which has an inherent accuracy at the picosecond level\&.
.PP
\fBParameters\fP
.RS 4
\fItime\fP Pointer to the astronomical time specification data structure\&. 
.br
\fItimescale\fP The astronomical time scale in which the returned Julian Date is to be provided 
.RE
.PP
\fBReturns\fP
.RS 4
[day] The Julian date in the requested timescale\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_set_time()\fP 
.PP
\fBnovas_get_split_time()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBnovas_get_split_time()\fP\&.
.SS "time_t novas_get_unix_time (const \fBnovas_timespec\fP * time, long * nanos)"
Returns the UNIX time for an astronomical time instant\&.
.PP
\fBParameters\fP
.RS 4
\fItime\fP Pointer to the astronomical time specification data structure\&. 
.br
\fInanos\fP [ns] UTC sub-second component\&. It may be NULL if not required\&. 
.RE
.PP
\fBReturns\fP
.RS 4
[s] The integer UNIX time, or -1 if the input time is NULL\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_set_unix_time()\fP 
.PP
\fBnovas_get_time()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBnovas_get_split_time()\fP, and \fBNOVAS_UTC\fP\&.
.SS "int novas_iso_timestamp (const \fBnovas_timespec\fP * time, char * dst, int maxlen)"
Prints a UTC-based ISO timestamp to millisecond precision to the specified string buffer\&. E\&.g\&.:
.PP
.PP
.nf

 2025-01-26T21:32:49\&.701Z
.fi
.PP
.PP
NOTES: 
.PD 0
.IP "1." 4
The timestamp uses the conventional date of the time\&. That is Gregorian dates after the Gregorian calendar reform of 15 October 1582, and Julian/Roman dates prior to that\&. 
.IP "2." 4
B\&.C\&. dates are indicated with years <=0 according to the astronomical and ISO 8601 convention, i\&.e\&., X B\&.C\&. as (1-X), so 45 B\&.C\&. as -44\&. 
.PP
.PP
\fBParameters\fP
.RS 4
\fItime\fP Pointer to the astronomical time specification data structure\&. 
.br
\fIdst\fP Output string buffer\&. At least 25 bytes are required for a complete timestamp with termination\&. 
.br
\fImaxlen\fP The maximum number of characters that can be printed into the output buffer, including the string termination\&. If the full ISO timestamp is longer than \fCmaxlen\fP, then it will be truncated to fit in the allotted space, including a termination character\&. 
.RE
.PP
\fBReturns\fP
.RS 4
the number of characters printed into the string buffer, not including the termination\&. As such it is at most \fCmaxlen - 1\fP\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_timestamp()\fP 
.PP
novas_parse_time() 
.RE
.PP

.PP
References \fBnovas_get_split_time()\fP, and \fBNOVAS_UTC\fP\&.
.SS "int novas_offset_time (const \fBnovas_timespec\fP * time, double seconds, \fBnovas_timespec\fP * out)"
Increments the astrometric time by a given amount\&.
.PP
\fBParameters\fP
.RS 4
\fItime\fP Original time specification 
.br
\fIseconds\fP [s] Seconds to add to the original 
.br
\fIout\fP New incremented time specification\&. It may be the same as the input\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else -1 if either the input or the output is NULL (errno will be set to EINVAL)\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_set_time()\fP 
.PP
\fBnovas_diff_time()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBnovas_timespec::fjd_tt\fP, and \fBnovas_timespec::ijd_tt\fP\&.
.SS "double novas_parse_date (const char * date, char ** tail)"
Parses a date/time string into a Julian date specification\&. Typically the date may be an ISO date specification, but with some added flexibility\&. The date must be YMD-type with full year, followed the month (numerical or name or 3-letter abbreviation), and the day\&. The components may be separated by dash \fC-\fP, underscore \fC_\fP, dot \fC\&.\fP, slash '/', or spaces/tabs, or any combination thereof\&. The date may be followed by a time specification in HMS format, separated from the date by the letter \fCT\fP or \fCt\fP, or spaces, comma \fC,\fP, or semicolon \fC;\fP, or underscore \fC_\fP or a combination thereof\&. Finally, the time may be followed by the letter \fCZ\fP, or \fCz\fP (for UTC) or else {+/-}HH[:[MM]] time zone specification\&.
.PP
For example:
.PP
.PP
.nf

 2025-01-26
 2025 January 26
 2025_Jan_26
 2025-01-26T19:33:08Z
 2025\&.01\&.26T19:33:08
 2025 1 26 19h33m28\&.113
 2025/1/26 19:33:28+02
 2025-01-26T19:33:28-0600
 2025 Jan 26 19:33:28+05:30
.fi
.PP
.PP
are all valid dates that can be parsed\&.
.PP
NOTES: 
.PD 0
.IP "1." 4
This function uses Gregorian dates since their introduction on 1582 October 15, and Julian/Roman datew before that, as was the convention of the time\&. I\&.e\&., the day before of the introduction of the Gregorian calendar reform is 1582 October 4\&.
.PP

.IP "2." 4
B\&.C\&. dates are indicated with years <=0 according to the astronomical and ISO 8601 convention, i\&.e\&., X B\&.C\&. as (1-X), so 45 B\&.C\&. as -44\&. 
.PP
.PP
\fBParameters\fP
.RS 4
\fIdate\fP The date specification, possibly including time and timezone, in a standard format\&. 
.br
\fItail\fP (optional) If not NULL it will be set to the next character in the string after the parsed time\&. The parsing will consume empty space characters after the time specification also, returning a pointer to the next token after\&.
.RE
.PP
\fBReturns\fP
.RS 4
The Julian Date corresponding to the string date/time specification or NAN if the string is NULL or if it does not specify a date/time in the expected format\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_parse_date_format()\fP 
.PP
\fBnovas_timescale_for_string()\fP 
.PP
\fBnovas_iso_timestamp()\fP 
.PP
\fBnovas_timestamp()\fP 
.RE
.PP

.PP
References \fBNOVAS_CALENDAR_OF_DATE\fP, \fBnovas_parse_date_format()\fP, and \fBNOVAS_YMD\fP\&.
.SS "double novas_parse_date_format (enum \fBnovas_calendar_type\fP calendar, enum \fBnovas_date_format\fP format, const char * date, char ** tail)"
Parses a calndar date/time string, expressed in the specified type of calendar, into a Julian day (JD)\&. The date must be composed of a full year (e\&.g\&. 2025), a month (numerical or name or 3-letter abbreviation, e\&.g\&. '01', '1', 'January', or 'Jan'), and a day (e\&.g\&. '08' or '8')\&. The components may be separated by dash \fC-\fP, underscore \fC_\fP, dot \fC\&.\fP, slash '/', or spaces/tabs, or any combination thereof\&. The components will be parsed in the specified order\&.
.PP
The date may be followed by a time specification in HMS format, separated from the date by the letter \fCT\fP or \fCt\fP, or spaces, comma \fC,\fP, or semicolon \fC;\fP or underscore '_', or a combination thereof\&. Finally, the time may be followed by the letter \fCZ\fP, or \fCz\fP (for UTC) or else by a {+/-}HH[:[MM]] time zone specification\&.
.PP
For example, for \fCformat\fP NOVAS_YMD, all of the following strings may specify the date:
.PP
.PP
.nf

 2025-01-26
 2025 January 26
 2025_Jan_26
 2025-01-26T19:33:08Z
 2025\&.01\&.26T19:33:08
 2025 1 26 19h33m28\&.113
 2025/1/26 19:33:28+02
 2025-01-26T19:33:28-0600
 2025 Jan 26 19:33:28+05:30
.fi
.PP
.PP
are all valid dates that can be parsed\&.
.PP
If your date format cannot be parsed with this function, you may parse it with your own function into year, month, day, and decimal hour-of-day components, and use \fBjulian_date()\fP with those\&.
.PP
NOTES: 
.PD 0
.IP "1." 4
B\&.C\&. dates are indicated with years <=0 according to the astronomical and ISO 8601 convention, i\&.e\&., X B\&.C\&. as (1-X), so 45 B\&.C\&. as -44\&. 
.PP
.PP
\fBParameters\fP
.RS 4
\fIcalendar\fP The type of calendar to use: NOVAS_CONVENTIONAL_CALENDAR, NOVAS_GREGORIAN_CALENDAR, or NOVAS_ROMAN_CALENDAR\&. 
.br
\fIformat\fP Expected order of date components: NOVAS_YMD, NOVAS_DMY, or NOVAS_MDY\&. 
.br
\fIdate\fP The date specification, possibly including time and timezone, in the specified standard format\&. 
.br
\fItail\fP (optional) If not NULL it will be set to the next character in the string after the parsed time\&. The parsing will consume empty space characters after the time specification also, returning a pointer to the next token after\&.
.RE
.PP
\fBReturns\fP
.RS 4
The Julian Date corresponding to the string date/time specification or NAN if the string is NULL or if it does not specify a date/time in the expected format\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_parse_date()\fP 
.PP
\fBnovas_timescale_for_string()\fP 
.PP
\fBnovas_iso_timestamp()\fP 
.PP
\fBjulian_date()\fP 
.RE
.PP

.PP
References \fBnovas_calendar_to_jd()\fP, \fBnovas_debug()\fP, \fBNOVAS_DEBUG_OFF\fP, \fBNOVAS_DMY\fP, \fBnovas_get_debug_mode()\fP, \fBNOVAS_MDY\fP, \fBnovas_parse_hms()\fP, and \fBNOVAS_YMD\fP\&.
.SS "int novas_print_timescale (enum \fBnovas_timescale\fP scale, char * buf)"
Prints the standard string representation of the timescale to the specified buffer\&. The string is terminated after\&. E\&.g\&. 'UTC', or 'TAI'\&. It will print dates in the Gregorian calendar, which was introduced in was introduced on 15 October 1582 only\&. Thus the
.PP
\fBParameters\fP
.RS 4
\fIscale\fP The timescale 
.br
\fIbuf\fP String in which to print\&. It should have at least 4-bytes of available storage\&. 
.RE
.PP
\fBReturns\fP
.RS 4
the number of characters printed, not including termination, or else -1 if the timescale is invalid or the output buffer is NULL\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_timestamp()\fP 
.PP
\fBnovas_timescale_for_string()\fP 
.RE
.PP

.PP
References \fBNOVAS_GPS\fP, \fBNOVAS_TAI\fP, \fBNOVAS_TCB\fP, \fBNOVAS_TCG\fP, \fBNOVAS_TDB\fP, \fBNOVAS_TT\fP, \fBNOVAS_UT1\fP, and \fBNOVAS_UTC\fP\&.
.SS "int novas_set_split_time (enum \fBnovas_timescale\fP timescale, long ijd, double fjd, int leap, double dut1, \fBnovas_timespec\fP * time)"
Sets an astronomical time to the split Julian Date value, defined in the specified timescale\&. The split into the integer and fractional parts can be done in any convenient way\&. The highest precision is reached if the fractional part is  1 day\&. In that case, the time may be specified to picosecond accuracy, if needed\&.
.PP
The accuracy of Barycentric Time measures (TDB and TCB) relative to other time measures is limited by the precision of \fCtbd2tt()\fP implementation, to around 10 s\&.
.PP
REFERENCES: 
.PD 0
.IP "1." 4
IAU 1991, RECOMMENDATION III\&. XXIst General Assembly of the International Astronomical Union\&. Retrieved 6 June 2019\&. 
.IP "2." 4
IAU 2006 resolution 3, see Recommendation and footnotes, note 3\&. 
.IP "3." 4
Fairhead, L\&. & Bretagnon, P\&. (1990) Astron\&. & Astrophys\&. 229, 240\&. 
.IP "4." 4
Kaplan, G\&. (2005), US Naval Observatory Circular 179\&. 
.IP "5." 4
\fChttps://naif\&.jpl\&.nasa\&.gov/pub/naif/toolkit_docs/FORTRAN/req/time\&.html\fP 
.IP "6." 4
\fChttps://gssc\&.esa\&.int/navipedia/index\&.php/Transformations_between_Time_Systems\fP 
.PP
.PP
\fBParameters\fP
.RS 4
\fItimescale\fP The astronomical time scale in which the Julian Date is given 
.br
\fIijd\fP [day] integer part of the Julian day in the specified timescale 
.br
\fIfjd\fP [day] fractional part Julian day value in the specified timescale 
.br
\fIleap\fP [s] Leap seconds, e\&.g\&. as published by IERS Bulletin C\&. 
.br
\fIdut1\fP [s] UT1-UTC time difference, e\&.g\&. as published in IERS Bulletin A\&. 
.br
\fItime\fP Pointer to the data structure that uniquely defines the astronomical time for all applications\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else -1 if there was an error (errno will be set to indicate the type of error)\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_set_time()\fP 
.PP
\fBnovas_set_unix_time()\fP 
.PP
\fBnovas_get_split_time()\fP 
.PP
\fBnovas_timescale_for_string()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBnovas_timespec::dut1\fP, \fBnovas_timespec::fjd_tt\fP, \fBnovas_timespec::ijd_tt\fP, \fBNOVAS_GPS\fP, \fBNOVAS_TAI\fP, \fBNOVAS_TCB\fP, \fBNOVAS_TCG\fP, \fBNOVAS_TDB\fP, \fBNOVAS_TT\fP, \fBNOVAS_UT1\fP, \fBNOVAS_UTC\fP, \fBnovas_timespec::tt2tdb\fP, \fBtt2tdb()\fP, and \fBnovas_timespec::ut1_to_tt\fP\&.
.SS "int novas_set_time (enum \fBnovas_timescale\fP timescale, double jd, int leap, double dut1, \fBnovas_timespec\fP * time)"
Sets an astronomical time to the fractional Julian Date value, defined in the specified timescale\&. The time set this way is accurate to a few s (microseconds) due to the inherent precision of the double-precision argument\&. For higher precision applications you may use \fC\fBnovas_set_split_time()\fP\fP instead, which has an inherent accuracy at the picosecond level\&.
.PP
\fBParameters\fP
.RS 4
\fItimescale\fP The astronomical time scale in which the Julian Date is given 
.br
\fIjd\fP [day] Julian day value in the specified timescale 
.br
\fIleap\fP [s] Leap seconds, e\&.g\&. as published by IERS Bulletin C\&. 
.br
\fIdut1\fP [s] UT1-UTC time difference, e\&.g\&. as published in IERS Bulletin A\&. 
.br
\fItime\fP Pointer to the data structure that uniquely defines the astronomical time for all applications\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else -1 if there was an error (errno will be set to indicate the type of error)\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_set_split_time()\fP 
.PP
\fBnovas_set_unix_time()\fP 
.PP
\fBnovas_get_time()\fP 
.PP
\fBnovas_timescale_for_string()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBnovas_set_split_time()\fP\&.
.SS "int novas_set_unix_time (time_t unix_time, long nanos, int leap, double dut1, \fBnovas_timespec\fP * time)"
Sets an astronomical time to a UNIX time value\&. UNIX time is defined as UTC seconds measured since 0 UTC, 1 Jan 1970 (the start of the UNIX era)\&. Specifying time this way supports precisions to the nanoseconds level by construct\&. Specifying UNIX time in split seconds and nanoseconds is a common way CLIB handles precision time, e\&.g\&. with \fCstruct timespec\fP and functions like \fCclock_gettime()\fP (see \fCtime\&.h\fP)\&.
.PP
\fBParameters\fP
.RS 4
\fIunix_time\fP [s] UNIX time (UTC) seconds 
.br
\fInanos\fP [ns] UTC sub-second component 
.br
\fIleap\fP [s] Leap seconds, e\&.g\&. as published by IERS Bulletin C\&. 
.br
\fIdut1\fP [s] UT1-UTC time difference, e\&.g\&. as published in IERS Bulletin A\&. 
.br
\fItime\fP Pointer to the data structure that uniquely defines the astronomical time for all applications\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else -1 if there was an error (errno will be set to indicate the type of error)\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_set_time()\fP 
.PP
\fBnovas_get_unix_time()\fP 
.PP
clock_gettime() 
.PP
struct timespec
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBnovas_set_split_time()\fP, and \fBNOVAS_UTC\fP\&.
.SS "enum \fBnovas_timescale\fP novas_timescale_for_string (const char * str)"
Returns the timescale constant for a string that denotes the timescale in with a standard abbreviation (case insensitive)\&. The following values are recognised: 'UTC', 'UT', 'UT0', 'UT1', 'GMT', 'TAI', 'GPS', 'TT', 'ET', 'TCG', 'TCB', 'TDB'\&.
.PP
\fBParameters\fP
.RS 4
\fIstr\fP String specifying an astronomical timescale 
.RE
.PP
\fBReturns\fP
.RS 4
The SuperNOVAS timescale constant (<=0), or else -1 if the string was NULL, empty, or could not be matched to a timescale value (errno will be set to EINVAL also)\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_set_time()\fP 
.PP
\fBnovas_set_split_time()\fP 
.PP
\fBnovas_print_timescale()\fP 
.RE
.PP

.PP
References \fBNOVAS_GPS\fP, \fBNOVAS_TAI\fP, \fBNOVAS_TCB\fP, \fBNOVAS_TCG\fP, \fBNOVAS_TDB\fP, \fBNOVAS_TT\fP, \fBNOVAS_UT1\fP, and \fBNOVAS_UTC\fP\&.
.SS "int novas_timestamp (const \fBnovas_timespec\fP * time, enum \fBnovas_timescale\fP scale, char * dst, int maxlen)"
Prints a an ISO timestamp to millisecond precision in the specified timescale to the specified string buffer\&. E\&.g\&.:
.PP
.PP
.nf

 2025-01-26T21:32:49\&.701 TAI
.fi
.PP
.PP
NOTES: 
.PD 0
.IP "1." 4
The timestamp uses the conventional date of the time\&. That is Gregorian dates after the Gregorian calendar reform of 15 October 1582, and Julian/Roman dates prior to that\&. 
.IP "2." 4
B\&.C\&. dates are indicated with years <=0 according to the astronomical and ISO 8601 convention, i\&.e\&., X B\&.C\&. as (1-X), so 45 B\&.C\&. as -44\&. 
.PP
.PP
\fBParameters\fP
.RS 4
\fItime\fP Pointer to the astronomical time specification data structure\&. 
.br
\fIscale\fP The timescale to use\&. 
.br
\fIdst\fP Output string buffer\&. At least 29 bytes are required for a complete timestamp with termination\&. 
.br
\fImaxlen\fP The maximum number of characters that can be printed into the output buffer, including the string termination\&. If the full ISO timestamp is longer than \fCmaxlen\fP, then it will be truncated to fit in the allotted space, including a termination character\&. 
.RE
.PP
\fBReturns\fP
.RS 4
the number of characters printed into the string buffer, not including the termination\&. As such it is at most \fCmaxlen - 1\fP\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_iso_timestamp()\fP 
.RE
.PP

.PP
References \fBnovas_get_split_time()\fP, and \fBnovas_print_timescale()\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for SuperNOVAS from the source code\&.
