.TH "deprecated" 3 "Version v1.3" "SuperNOVAS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
deprecated \- Deprecated List 
.PP

.IP "\fBGlobal \fBapp_planet\fP (double jd_tt, const object *restrict ss_body, enum novas_accuracy accuracy, double *restrict ra, double *restrict dec, double *restrict dis)\fP" 1c
Use \fBplace_cirs()\fP is now preferred, especially for high accuracy calculations\&. 
.IP "\fBGlobal \fBapp_star\fP (double jd_tt, const \fBcat_entry\fP *restrict star, enum novas_accuracy accuracy, double *restrict ra, double *restrict dec)\fP" 1c
Use \fBplace_cirs()\fP is now preferred, especially for high accuracy calculations\&. 
.IP "\fBGlobal \fBBARYC\fP \fP" 1c
Old definition of the Barycenter origin\&. NOVAS_BARYCENTER is preferred\&.  
.IP "\fBGlobal \fBcel2ter\fP (double jd_ut1_high, double jd_ut1_low, double ut1_to_tt, enum novas_earth_rotation_measure erot, enum novas_accuracy accuracy, enum novas_equatorial_class cl, double xp, double yp, const double *in, double *out)\fP" 1c
This function can be confusing to use due to the input coordinate system being specified by a combination of two options\&. Use \fBitrs_to_cirs()\fP or \fBitrs_to_tod()\fP instead\&. You can then follow these with other conversions to GCRS (or whatever else) as appropriate\&. 
.IP "\fBGlobal \fBequ2hor\fP (double jd_ut1, double ut1_to_tt, enum novas_accuracy accuracy, double xp, double yp, const \fBon_surface\fP *restrict location, double ra, double dec, enum novas_refraction_model ref_option, double *restrict zd, double *restrict az, double *restrict rar, double *restrict decr)\fP" 1c
The name of this function does not reveal what type of equatorial coordinates it requires\&. To make it less ambiguous, you should use \fBtod_to_itrs()\fP followed by \fBitrs_to_hor()\fP instead, possibly following it with \fBrefract_astro()\fP if you also want to apply optical refraction\&. 
.IP "\fBGlobal \fBHELIOC\fP \fP" 1c
Old definition of the Center of Sun as the origin\&. NOVAS_HELIOCENTER is preferred\&.  
.IP "\fBGlobal \fBreadeph\fP (int mp, const char *restrict name, double jd_tdb, int *restrict error)\fP" 1c
This old ephemeris reader is prone to memory leaks, and lacks some useful functionality\&. Users are strongly encouraged to use the new \fCnovas_ephem_provider\fP instead, which can provide dynamically configured implementations at runtime\&. 
.IP "\fBGlobal \fBtdb2tt\fP (double jd_tdb, double *restrict jd_tt, double *restrict secdiff)\fP" 1c
Use the less computationally intensive an more accurate \fBtt2tdb()\fP routine instead\&. 
.IP "\fBGlobal \fBter2cel\fP (double jd_ut1_high, double jd_ut1_low, double ut1_to_tt, enum novas_earth_rotation_measure erot, enum novas_accuracy accuracy, enum novas_equatorial_class cl, double xp, double yp, const double *in, double *out)\fP" 1c
This function can be confusing to use due to the output coordinate system being specified by a combination of two options\&. Use \fBitrs_to_cirs()\fP or \fBitrs_to_tod()\fP instead\&. You can then follow these with other conversions to GCRS (or whatever else) as appropriate\&. 
.IP "\fBGlobal \fBtopo_planet\fP (double jd_tt, const object *restrict ss_body, double ut1_to_tt, const \fBon_surface\fP *restrict position, enum novas_accuracy accuracy, double *restrict ra, double *restrict dec, double *restrict dis)\fP" 1c
Using \fBplace()\fP with system NOVAS_CIRS is now preferred for topocentric calculations, especially when high precision is required\&. However, you will have to follow the IAU 2000 method consistently to produce equivalent calculations throughout\&. 
.IP "\fBGlobal \fBtopo_star\fP (double jd_tt, double ut1_to_tt, const \fBcat_entry\fP *restrict star, const \fBon_surface\fP *restrict position, enum novas_accuracy accuracy, double *restrict ra, double *restrict dec)\fP" 1c
Using \fBplace()\fP with system NOVAS_CIRS is now preferred for topocentric calculations, especially when high precision is required\&. However, you will have to follow the IAU 2000 method consistently to produce equivalent calculations throughout\&.
.PP

