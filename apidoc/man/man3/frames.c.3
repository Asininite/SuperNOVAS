.TH "src/frames.c" 3 "Version v1.3" "SuperNOVAS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/frames.c
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBDA0\fP   (\-0\&.01460 * ARCSEC)"
.br
.RI "Frame bias term da\*<0\*>  "
.ti -1c
.RI "#define \fBETA0\fP   (\-0\&.0068192 * ARCSEC)"
.br
.RI "Frame bias term \*<0\*>  "
.ti -1c
.RI "#define \fBXI0\fP   (\-0\&.0166170 * ARCSEC)"
.br
.RI "Frame bias term \*<0\*>  "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBnovas_app_to_geom\fP (const \fBnovas_frame\fP *frame, enum \fBnovas_reference_system\fP sys, double ra, double dec, double dist, double *geom_icrs)"
.br
.ti -1c
.RI "int \fBnovas_app_to_hor\fP (const \fBnovas_frame\fP *frame, enum \fBnovas_reference_system\fP sys, double ra, double dec, \fBRefractionModel\fP ref_model, double *az, double *el)"
.br
.ti -1c
.RI "int \fBnovas_change_observer\fP (const \fBnovas_frame\fP *orig, const \fBobserver\fP *obs, \fBnovas_frame\fP *out)"
.br
.ti -1c
.RI "int \fBnovas_equ_track\fP (const \fBobject\fP *source, const \fBnovas_frame\fP *frame, double dt, \fBnovas_track\fP *track)"
.br
.ti -1c
.RI "double \fBnovas_frame_lst\fP (const \fBnovas_frame\fP *frame)"
.br
.ti -1c
.RI "int \fBnovas_geom_posvel\fP (const \fBobject\fP *source, const \fBnovas_frame\fP *frame, enum \fBnovas_reference_system\fP sys, double *pos, double *vel)"
.br
.ti -1c
.RI "int \fBnovas_geom_to_app\fP (const \fBnovas_frame\fP *frame, const double *pos, enum \fBnovas_reference_system\fP sys, \fBsky_pos\fP *out)"
.br
.ti -1c
.RI "int \fBnovas_hor_to_app\fP (const \fBnovas_frame\fP *frame, double az, double el, \fBRefractionModel\fP ref_model, enum \fBnovas_reference_system\fP sys, double *ra, double *dec)"
.br
.ti -1c
.RI "int \fBnovas_hor_track\fP (const \fBobject\fP *source, const \fBnovas_frame\fP *frame, \fBRefractionModel\fP ref_model, \fBnovas_track\fP *track)"
.br
.ti -1c
.RI "int \fBnovas_invert_transform\fP (const \fBnovas_transform\fP *transform, \fBnovas_transform\fP *inverse)"
.br
.ti -1c
.RI "int \fBnovas_make_frame\fP (enum \fBnovas_accuracy\fP accuracy, const \fBobserver\fP *obs, const \fBnovas_timespec\fP *time, double dx, double dy, \fBnovas_frame\fP *frame)"
.br
.ti -1c
.RI "int \fBnovas_make_transform\fP (const \fBnovas_frame\fP *frame, enum \fBnovas_reference_system\fP from_system, enum \fBnovas_reference_system\fP to_system, \fBnovas_transform\fP *transform)"
.br
.ti -1c
.RI "double \fBnovas_moon_angle\fP (const \fBobject\fP *source, const \fBnovas_frame\fP *frame)"
.br
.ti -1c
.RI "double \fBnovas_object_sep\fP (const \fBobject\fP *source1, const \fBobject\fP *source2, const \fBnovas_frame\fP *frame)"
.br
.ti -1c
.RI "double \fBnovas_rises_above\fP (double el, const \fBobject\fP *source, const \fBnovas_frame\fP *frame, \fBRefractionModel\fP ref_model)"
.br
.ti -1c
.RI "double \fBnovas_sets_below\fP (double el, const \fBobject\fP *source, const \fBnovas_frame\fP *frame, \fBRefractionModel\fP ref_model)"
.br
.ti -1c
.RI "int \fBnovas_sky_pos\fP (const \fBobject\fP *\fBobject\fP, const \fBnovas_frame\fP *frame, enum \fBnovas_reference_system\fP sys, \fBsky_pos\fP *out)"
.br
.ti -1c
.RI "double \fBnovas_solar_illum\fP (const \fBobject\fP *source, const \fBnovas_frame\fP *frame)"
.br
.ti -1c
.RI "double \fBnovas_sun_angle\fP (const \fBobject\fP *source, const \fBnovas_frame\fP *frame)"
.br
.ti -1c
.RI "int \fBnovas_track_pos\fP (const \fBnovas_track\fP *track, const \fBnovas_timespec\fP *time, double *lon, double *lat, double *dist, double *z)"
.br
.ti -1c
.RI "int \fBnovas_transform_sky_pos\fP (const \fBsky_pos\fP *in, const \fBnovas_transform\fP *transform, \fBsky_pos\fP *out)"
.br
.ti -1c
.RI "int \fBnovas_transform_vector\fP (const double *in, const \fBnovas_transform\fP *transform, double *out)"
.br
.ti -1c
.RI "double \fBnovas_transit_time\fP (const \fBobject\fP *source, const \fBnovas_frame\fP *frame)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBDate\fP
.RS 4
Created on Jun 23, 2024 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP
\fBSince\fP
.RS 4
1\&.1
.RE
.PP
SuperNOVAS routines for higher-level and efficient repeat coordinate transformations using observer frames\&. Observer frames represent an observer location at a specific astronomical time (instant), which can be re-used again and again to calculate or transform positions of celestial sources in a a range of astronomical coordinate systems\&.
.PP
\fBSee also\fP
.RS 4
\fBtimescale\&.c\fP 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "int novas_app_to_geom (const \fBnovas_frame\fP * frame, enum \fBnovas_reference_system\fP sys, double ra, double dec, double dist, double * geom_icrs)"
Converts an observed apparent sky position of a source to an ICRS geometric position, by undoing the gravitational deflection and aberration corrections\&.
.PP
\fBParameters\fP
.RS 4
\fIframe\fP The observer frame, defining the location and time of observation 
.br
\fIsys\fP The reference system in which the observed position is specified\&. 
.br
\fIra\fP [h] Observed ICRS right-ascension of the source 
.br
\fIdec\fP [deg] Observed ICRS declination of the source 
.br
\fIdist\fP [AU] Observed distance from observer\&. A value of <=0 will translate to 10\*{15\*}  AU (around 5 Gpc)\&. 
.br
\fIgeom_icrs\fP [AU] The corresponding geometric position for the source, in ICRS\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else an error from grav_undef2(), or -1 (errno will indicate the type of error)\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_geom_to_app()\fP 
.PP
\fBnovas_hor_to_app()\fP 
.PP
novas_geom_to_hor() 
.PP
\fBnovas_transform_vector()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBnovas_frame::gcrs_to_cirs\fP, \fBgrav_undo_planets()\fP, \fBnovas_frame::icrs_to_j2000\fP, \fBNOVAS_CIRS\fP, \fBNOVAS_J2000\fP, \fBNOVAS_MOD\fP, \fBNOVAS_REFERENCE_SYSTEMS\fP, \fBNOVAS_TOD\fP, \fBnovas_frame::nutation\fP, \fBnovas_frame::obs_pos\fP, \fBnovas_frame::planets\fP, \fBnovas_frame::precession\fP, and \fBradec2vector()\fP\&.
.SS "int novas_app_to_hor (const \fBnovas_frame\fP * frame, enum \fBnovas_reference_system\fP sys, double ra, double dec, \fBRefractionModel\fP ref_model, double * az, double * el)"
Converts an observed apparent position vector in the specified coordinate system to local horizontal coordinates in the specified observer frame\&. The observer must be located on the surface of Earth, or else the call will return with an error\&. The caller may optionally supply a refraction model of choice to calculate an appropriate elevation angle that includes a refraction correction for Earth's atmosphere\&. If no such model is provided the calculated elevation will be the astrometric elevation without a refraction correction\&.
.PP
\fBParameters\fP
.RS 4
\fIframe\fP Observer frame, defining the time and place of observation (on Earth)\&. 
.br
\fIsys\fP Astronomical coordinate system in which the observed position is given\&. 
.br
\fIra\fP [h] Observed apparent right ascension (R\&.A\&.) coordinate 
.br
\fIdec\fP [deg] Observed apparent declination coordinate 
.br
\fIref_model\fP An appropriate refraction model, or NULL to calculate unrefracted elevation\&. Depending on the refraction model, you might want to make sure that the weather parameters were set when the observing frame was defined\&. 
.br
\fIaz\fP [deg] Calculated azimuth angle\&. It may be NULL if not required\&. 
.br
\fIel\fP [deg] Calculated elevation angle\&. It may be NULL if not required\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else an error from \fBtod_to_itrs()\fP or \fBcirs_to_itrs()\fP, or -1 (errno will indicate the type of error)\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_hor_to_app()\fP 
.PP
\fBnovas_app_to_geom()\fP 
.PP
\fBnovas_standard_refraction()\fP 
.PP
\fBnovas_optical_refraction()\fP 
.PP
\fBnovas_radio_refraction()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBnovas_frame::era\fP, \fBnovas_timespec::fjd_tt\fP, \fBnovas_frame::gcrs_to_cirs\fP, \fBnovas_frame::gst\fP, \fBnovas_timespec::ijd_tt\fP, \fBitrs_to_hor()\fP, \fBNOVAS_AIRBORNE_OBSERVER\fP, \fBNOVAS_CIRS\fP, \fBNOVAS_GCRS\fP, \fBNOVAS_ICRS\fP, \fBNOVAS_J2000\fP, \fBNOVAS_MOD\fP, \fBNOVAS_OBSERVER_ON_EARTH\fP, \fBNOVAS_REFRACT_ASTROMETRIC\fP, \fBNOVAS_TOD\fP, \fBnovas_frame::nutation\fP, \fBnovas_frame::observer\fP, \fBobserver::on_surf\fP, \fBnovas_frame::precession\fP, \fBradec2vector()\fP, \fBspin()\fP, \fBnovas_frame::time\fP, and \fBobserver::where\fP\&.
.SS "int novas_change_observer (const \fBnovas_frame\fP * orig, const \fBobserver\fP * obs, \fBnovas_frame\fP * out)"
Change the observer location for an observing frame\&.
.PP
\fBParameters\fP
.RS 4
\fIorig\fP Pointer to original observing frame 
.br
\fIobs\fP New observer location 
.br
\fIout\fP Observing frame to populate with a original frame data and new observer location\&. It can be the same as the input\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successfule or else an an error code from \fBgeo_posvel()\fP (errno will also indicate the type of error)\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_make_frame()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBnovas_frame::accuracy\fP, \fBgrav_bodies_full_accuracy\fP, \fBgrav_bodies_reduced_accuracy\fP, \fBNOVAS_FULL_ACCURACY\fP, \fBnovas_get_time()\fP, \fBNOVAS_TDB\fP, \fBobs_planets()\fP, \fBnovas_frame::obs_pos\fP, \fBnovas_frame::observer\fP, \fBnovas_frame::planets\fP, \fBnovas_frame::state\fP, and \fBnovas_frame::time\fP\&.
.SS "int novas_equ_track (const \fBobject\fP * source, const \fBnovas_frame\fP * frame, double dt, \fBnovas_track\fP * track)"
Calculates equatorial tracking position and motion (first and second time derivatives) for the specified source in the given observing frame\&. The position and its derivatives are calculated via the more precise IAU2006 method, and CIRS\&.
.PP
\fBParameters\fP
.RS 4
\fIsource\fP Observed source 
.br
\fIframe\fP Observing frame, defining the observer location and astronomical time of observation\&. 
.br
\fIdt\fP [s] Time step used for calculating derivatives\&. 
.br
\fItrack\fP Output tracking parameters to populate 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else -1 if any of the pointer arguments are NULL, or else an error code from \fBcio_ra()\fP or from \fBnovas_sky_pos()\fP\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_hor_track()\fP 
.PP
\fBnovas_track_pos()\fP 
.RE
.PP

.PP
References \fBnovas_track::accel\fP, \fBnovas_frame::accuracy\fP, \fBcio_ra()\fP, \fBsky_pos::dec\fP, \fBsky_pos::dis\fP, \fBnovas_observable::dist\fP, \fBnovas_frame::dx\fP, \fBnovas_frame::dy\fP, \fBnovas_timespec::fjd_tt\fP, \fBnovas_timespec::ijd_tt\fP, \fBnovas_observable::lat\fP, \fBnovas_observable::lon\fP, \fBNOVAS_CIRS\fP, \fBnovas_make_frame()\fP, \fBnovas_sky_pos()\fP, \fBnovas_v2z()\fP, \fBnovas_frame::observer\fP, \fBnovas_track::pos\fP, \fBsky_pos::ra\fP, \fBnovas_track::rate\fP, \fBsky_pos::rv\fP, \fBnovas_frame::time\fP, \fBnovas_track::time\fP, and \fBnovas_observable::z\fP\&.
.SS "double novas_frame_lst (const \fBnovas_frame\fP * frame)"
Returns the Local (apparent) Sidereal Time for an observing frame of an Earth-bound observer\&.
.PP
\fBParameters\fP
.RS 4
\fIframe\fP Observer frame, defining the location and time of observation 
.RE
.PP
\fBReturns\fP
.RS 4
[h] The LST for an Earth-bound observer [0\&.0--24\&.0), or NAN otherwise\&. If NAN is returned errno will indicate the type of error\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBnovas_frame::gst\fP, \fBon_surface::longitude\fP, \fBNOVAS_AIRBORNE_OBSERVER\fP, \fBNOVAS_OBSERVER_ON_EARTH\fP, \fBnovas_frame::observer\fP, \fBobserver::on_surf\fP, and \fBobserver::where\fP\&.
.SS "int novas_geom_posvel (const \fBobject\fP * source, const \fBnovas_frame\fP * frame, enum \fBnovas_reference_system\fP sys, double * pos, double * vel)"
Calculates the geometric position and velocity vectors, relative to the observer, for a source in the given observing frame, in the specified coordinate system of choice\&. The geometric position includes proper motion, and for solar-system bodies it is antedated for light travel time, so it effectively represents the geometric position as seen by the observer\&. However, the geometric does not include aberration correction, nor gravitational deflection\&.
.PP
If you want apparent positions, which account for aberration and gravitational deflection, use novas_skypos() instead\&.
.PP
You can also use \fBnovas_transform_vector()\fP to convert the output position and velocity vectors to a dfferent coordinate system of choice afterwards if you want the results expressed in more than one coordinate system\&.
.PP
It implements the same geometric transformations as \fC\fBplace()\fP\fP but at a reduced computational cost\&. See \fC\fBplace()\fP\fP for references\&.
.PP
NOTES: 
.PD 0
.IP "1." 4
If \fCsys\fP is \fCNOVAS_TOD\fP (true equator and equinox of date), the less precise old (pre IAU 2006) method is used, with the Lieske et al\&. 1977 nutation model, matching the behavior of the original NOVAS C \fBplace()\fP for that system\&. To obtain more precise TOD coordinates, set \fCsys\fP to \fCNOVAS_CIRS\fP here, and follow with \fBcirs_to_tod()\fP after\&. 
.IP "2." 4
As of SuperNOVAS v1\&.3, the returned velocity vector is a proper observer-based velocity measure\&. In prior releases, and in NOVAS C 3\&.1, this was inconsistent, with pseudo LSR-based measures being returned for catalog sources\&. 
.PP
.PP
\fBParameters\fP
.RS 4
\fIsource\fP Pointer to a celestial source data structure that is observed\&. Catalog sources should have coordinates and properties in ICRS\&. You can use \fC\fBtransform_cat()\fP\fP to convert catalog entries to ICRS as necessary\&. 
.br
\fIframe\fP Observer frame, defining the location and time of observation 
.br
\fIsys\fP The coordinate system in which to return positions and velocities\&. 
.br
\fIpos\fP [AU] Calculated geometric position vector of the source relative to the observer location, in the designated coordinate system\&. It may be NULL if not required\&. 
.br
\fIvel\fP [AU/day] The calculated velocity vector of the source relative to the observer in the designated coordinate system\&. It must be distinct from the pos output vector, and may be NULL if not required\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else -1 if any of the arguments is invalid, 50--70 error is 50 + error from \fBlight_time2()\fP\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_geom_to_app()\fP 
.PP
\fBnovas_sky_pos()\fP 
.PP
\fBnovas_transform_vector()\fP 
.PP
\fBplace()\fP 
.PP
\fBcirs_to_tod()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBnovas_frame::accuracy\fP, \fBbary2obs()\fP, \fBd_light()\fP, \fBlight_time2()\fP, \fBnovas_planet_bundle::mask\fP, \fBNOVAS_CATALOG_OBJECT\fP, \fBNOVAS_FULL_ACCURACY\fP, \fBnovas_get_time()\fP, \fBNOVAS_JD_J2000\fP, \fBNOVAS_PLANET\fP, \fBNOVAS_REDUCED_ACCURACY\fP, \fBNOVAS_TDB\fP, \fBobject::number\fP, \fBnovas_frame::obs_pos\fP, \fBnovas_frame::planets\fP, \fBnovas_planet_bundle::pos\fP, \fBproper_motion()\fP, \fBobject::star\fP, \fBstarvectors()\fP, \fBnovas_frame::time\fP, \fBobject::type\fP, and \fBnovas_planet_bundle::vel\fP\&.
.SS "int novas_geom_to_app (const \fBnovas_frame\fP * frame, const double * pos, enum \fBnovas_reference_system\fP sys, \fBsky_pos\fP * out)"
Converts an geometric position in ICRS to an apparent position on sky, by applying appropriate corrections for aberration and gravitational deflection for the observer's frame\&. Unlike \fC\fBplace()\fP\fP the output reports the distance calculated from the parallax for sidereal sources\&. The radial velocity of the output is set to NAN (if needed use \fBnovas_sky_pos()\fP instead)\&.
.PP
\fBParameters\fP
.RS 4
\fIframe\fP The observer frame, defining the location and time of observation 
.br
\fIpos\fP [AU] Geometric position of source in ICRS coordinates 
.br
\fIsys\fP The coordinate system in which to return the apparent sky location 
.br
\fIout\fP Pointer to the data structure which is populated with the calculated apparent location in the designated coordinate system\&. It may be the same pounter as the input position\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or an error from grav_def2(), or else -1 (errno will indicate the type of error)\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_sky_pos()\fP 
.PP
\fBnovas_app_to_geom()\fP 
.PP
\fBnovas_app_to_hor()\fP 
.PP
\fBnovas_geom_posvel()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBnovas_frame::accuracy\fP, \fBsky_pos::dec\fP, \fBsky_pos::dis\fP, \fBgrav_planets()\fP, \fBNOVAS_FULL_ACCURACY\fP, \fBNOVAS_REDUCED_ACCURACY\fP, \fBnovas_frame::obs_pos\fP, \fBnovas_frame::planets\fP, \fBsky_pos::r_hat\fP, \fBsky_pos::ra\fP, \fBsky_pos::rv\fP, and \fBvector2radec()\fP\&.
.SS "int novas_hor_to_app (const \fBnovas_frame\fP * frame, double az, double el, \fBRefractionModel\fP ref_model, enum \fBnovas_reference_system\fP sys, double * ra, double * dec)"
Converts an observed azimuth and elevation coordinate to right ascension (R\&.A\&.) and declination coordinates expressed in the coordinate system of choice\&. The observer must be located on the surface of Earth, or else the call will return with an error\&. The caller may optionally supply a refraction model of choice to calculate an appropriate elevation angle that includes a refraction correction for Earth's atmosphere\&. If no such model is provided, the provided elevation value will be assumed to be an astrometric elevation without a refraction correction\&.
.PP
\fBParameters\fP
.RS 4
\fIframe\fP Observer frame, defining the time and place of observation (on Earth)\&. 
.br
\fIaz\fP [deg] Observed azimuth angle\&. It may be NULL if not required\&. 
.br
\fIel\fP [deg] Observed elevation angle\&. It may be NULL if not required\&. 
.br
\fIref_model\fP An appropriate refraction model, or NULL to assume unrefracted elevation\&. Depending on the refraction model, you might want to make sure that the weather parameters were set when the observing frame was defined\&. 
.br
\fIsys\fP Astronomical coordinate system in which the output is R\&.A\&. and declination values are to be calculated\&. 
.br
\fIra\fP [h] Calculated apparent right ascension (R\&.A\&.) coordinate 
.br
\fIdec\fP [deg] Calculated apparent declination coordinate 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else an error from \fBitrs_to_tod()\fP or \fBitrs_to_cirs()\fP, or -1 (errno will indicate the type of error)\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_app_to_hor()\fP 
.PP
\fBnovas_app_to_geom()\fP 
.PP
\fBnovas_standard_refraction()\fP 
.PP
\fBnovas_optical_refraction()\fP 
.PP
\fBnovas_radio_refraction()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBnovas_frame::era\fP, \fBnovas_timespec::fjd_tt\fP, \fBnovas_frame::gcrs_to_cirs\fP, \fBnovas_frame::gst\fP, \fBhor_to_itrs()\fP, \fBnovas_timespec::ijd_tt\fP, \fBNOVAS_AIRBORNE_OBSERVER\fP, \fBNOVAS_CIRS\fP, \fBNOVAS_GCRS\fP, \fBNOVAS_ICRS\fP, \fBNOVAS_J2000\fP, \fBNOVAS_MOD\fP, \fBNOVAS_OBSERVER_ON_EARTH\fP, \fBNOVAS_REFRACT_OBSERVED\fP, \fBNOVAS_TOD\fP, \fBnovas_frame::nutation\fP, \fBnovas_frame::observer\fP, \fBobserver::on_surf\fP, \fBnovas_frame::precession\fP, \fBspin()\fP, \fBnovas_frame::time\fP, \fBvector2radec()\fP, and \fBobserver::where\fP\&.
.SS "int novas_hor_track (const \fBobject\fP * source, const \fBnovas_frame\fP * frame, \fBRefractionModel\fP ref_model, \fBnovas_track\fP * track)"
Calculates horizontal tracking position and motion (first and second time derivatives) for the specified source in the given observing frame\&. The position and its derivatives are calculated via the more precise IAU2006 method, and CIRS, and then converted to local horizontal coordinates using the specified refraction model (if any)\&.
.PP
\fBParameters\fP
.RS 4
\fIsource\fP Observed source 
.br
\fIframe\fP Observing frame, defining the observer location and astronomical time of observation\&. 
.br
\fIref_model\fP Refraction model to use, or NULL for an unrefracted track\&. 
.br
\fItrack\fP Output tracking parameters to populate 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else -1 if any of the pointer arguments are NULL, or else an error code from \fBcio_ra()\fP or from \fBnovas_sky_pos()\fP, or from novas_app_hor()\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_equ_track()\fP 
.PP
\fBnovas_track_pos()\fP 
.RE
.PP

.PP
References \fBnovas_track::accel\fP, \fBnovas_frame::accuracy\fP, \fBcio_ra()\fP, \fBsky_pos::dec\fP, \fBsky_pos::dis\fP, \fBnovas_observable::dist\fP, \fBnovas_frame::dx\fP, \fBnovas_frame::dy\fP, \fBnovas_timespec::fjd_tt\fP, \fBnovas_timespec::ijd_tt\fP, \fBnovas_observable::lat\fP, \fBnovas_observable::lon\fP, \fBNOVAS_AIRBORNE_OBSERVER\fP, \fBnovas_app_to_hor()\fP, \fBNOVAS_CIRS\fP, \fBnovas_make_frame()\fP, \fBNOVAS_OBSERVER_ON_EARTH\fP, \fBnovas_sky_pos()\fP, \fBNOVAS_TOD\fP, \fBnovas_v2z()\fP, \fBnovas_frame::observer\fP, \fBnovas_track::pos\fP, \fBsky_pos::ra\fP, \fBnovas_track::rate\fP, \fBsky_pos::rv\fP, \fBnovas_frame::time\fP, \fBnovas_track::time\fP, \fBobserver::where\fP, and \fBnovas_observable::z\fP\&.
.SS "int novas_invert_transform (const \fBnovas_transform\fP * transform, \fBnovas_transform\fP * inverse)"
Inverts a novas coordinate transformation matrix\&.
.PP
\fBParameters\fP
.RS 4
\fItransform\fP Pointer to a coordinate transformation matrix\&. 
.br
\fIinverse\fP Pointer to a coordinate transformation matrix to populate with the inverse transform\&. It may be the same as the input\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else -1 if the was an error (errno will indicate the type of error)\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_make_transform()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBnovas_transform::matrix\fP\&.
.SS "int novas_make_frame (enum \fBnovas_accuracy\fP accuracy, const \fBobserver\fP * obs, const \fBnovas_timespec\fP * time, double dx, double dy, \fBnovas_frame\fP * frame)"
Sets up a observing frame for a specific observer location, time of observation, and accuracy requirement\&. The frame is initialized using the currently configured planet ephemeris provider function (see \fBset_planet_provider()\fP and \fBset_planet_provider_hp()\fP), and in case of reduced accuracy mode, the currently configured IAU nutation model provider (see \fBset_nutation_lp_provider()\fP)\&.
.PP
Note, that to construct full accuracy frames, you will need a high-precision ephemeris provider for the major planets (not just the default Earth/Sun), as without it, gravitational bending around massive plannets cannot be accounted for, and therefore as accuracy cannot be ensured, in general\&. Attempting to construct a high-accuracy frame without a high-precision ephemeris provider for the major planets will result in an error in the 10--40 range from the required \fBephemeris()\fP call\&.
.PP
\fBParameters\fP
.RS 4
\fIaccuracy\fP Accuracy requirement, NOVAS_FULL_ACCURACY (0) for the utmost precision or NOVAS_REDUCED_ACCURACY (1) if ~1 mas accuracy is sufficient\&. 
.br
\fIobs\fP Observer location 
.br
\fItime\fP Time of observation 
.br
\fIdx\fP [mas] Earth orientation parameter, polar offset in x\&. 
.br
\fIdy\fP [mas] Earth orientation parameter, polar offset in y\&. 
.br
\fIframe\fP Pointer to the observing frame to configure\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, 10--40: error is 10 + the error from \fBephemeris()\fP, 40--50: error is 40 + the error from \fBgeo_posvel()\fP, 50--80: error is 50 + the error from \fBsidereal_time()\fP, 80--90 error is 80 + error from \fBcio_location()\fP, 90--100 error is 90 + error from \fBcio_basis()\fP\&. or else -1 if there was an error (errno will indicate the type of error)\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_change_observer()\fP 
.PP
\fBnovas_sky_pos()\fP 
.PP
\fBnovas_geom_posvel()\fP 
.PP
\fBnovas_make_transform()\fP 
.PP
\fBset_planet_provider()\fP 
.PP
\fBset_planet_provider_hp()\fP 
.PP
\fBset_nutation_lp_provider()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBnovas_frame::accuracy\fP, \fBnovas_frame::deps0\fP, \fBnovas_frame::dpsi0\fP, \fBnovas_frame::dx\fP, \fBnovas_frame::dy\fP, \fBe_tilt()\fP, \fBnovas_frame::earth_pos\fP, \fBnovas_frame::earth_vel\fP, \fBnovas_frame::ee\fP, \fBephemeris()\fP, \fBnovas_frame::era\fP, \fBera()\fP, \fBEROT_GST\fP, \fBnovas_timespec::fjd_tt\fP, \fBnovas_frame::gst\fP, \fBnovas_timespec::ijd_tt\fP, \fBnovas_frame::mobl\fP, \fBNOVAS_BARYCENTER\fP, \fBnovas_change_observer()\fP, \fBNOVAS_EARTH_INIT\fP, \fBnovas_get_split_time()\fP, \fBNOVAS_JD_J2000\fP, \fBNOVAS_OBSERVER_PLACES\fP, \fBNOVAS_REDUCED_ACCURACY\fP, \fBNOVAS_SUN_INIT\fP, \fBNOVAS_TRUE_EQUINOX\fP, \fBNOVAS_UT1\fP, \fBnutation_angles()\fP, \fBsidereal_time()\fP, \fBnovas_frame::state\fP, \fBnovas_frame::sun_pos\fP, \fBnovas_frame::sun_vel\fP, \fBnovas_frame::time\fP, \fBnovas_frame::tobl\fP, \fBtt2tdb()\fP, \fBnovas_timespec::ut1_to_tt\fP, and \fBobserver::where\fP\&.
.SS "int novas_make_transform (const \fBnovas_frame\fP * frame, enum \fBnovas_reference_system\fP from_system, enum \fBnovas_reference_system\fP to_system, \fBnovas_transform\fP * transform)"
Calculates a transformation matrix that can be used to convert positions and velocities from one coordinate reference system to another\&.
.PP
\fBParameters\fP
.RS 4
\fIframe\fP Observer frame, defining the location and time of observation 
.br
\fIfrom_system\fP Original coordinate reference system 
.br
\fIto_system\fP New coordinate reference system 
.br
\fItransform\fP Pointer to the transform data structure to populate\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else -1 if there was an error (errno will indicate the type of error)\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_transform_vector()\fP 
.PP
\fBnovas_transform_sky_pos()\fP 
.PP
\fBnovas_invert_transform()\fP 
.PP
\fBnovas_geom_posvel()\fP 
.PP
\fBnovas_app_to_geom()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBnovas_transform::frame\fP, \fBnovas_transform::from_system\fP, \fBnovas_frame::gcrs_to_cirs\fP, \fBnovas_frame::icrs_to_j2000\fP, \fBnovas_matrix::M\fP, \fBnovas_transform::matrix\fP, \fBNOVAS_CIRS\fP, \fBNOVAS_GCRS\fP, \fBNOVAS_ICRS\fP, \fBNOVAS_J2000\fP, \fBNOVAS_MOD\fP, \fBNOVAS_REFERENCE_SYSTEMS\fP, \fBNOVAS_TOD\fP, \fBnovas_frame::nutation\fP, \fBnovas_frame::precession\fP, and \fBnovas_transform::to_system\fP\&.
.SS "double novas_moon_angle (const \fBobject\fP * source, const \fBnovas_frame\fP * frame)"
Returns the apparent angular distance of a source from the Moon from the observer's point of view\&.
.PP
\fBParameters\fP
.RS 4
\fIsource\fP An observed source 
.br
\fIframe\fP Observing frame, defining the observer location and astronomical time of observation\&. 
.RE
.PP
\fBReturns\fP
.RS 4
[deg] Apparent angular distance between the source an the Moon, from the observer's point of view
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_sun_angle()\fP 
.RE
.PP

.PP
References \fBNOVAS_MOON_INIT\fP, and \fBnovas_object_sep()\fP\&.
.SS "double novas_object_sep (const \fBobject\fP * source1, const \fBobject\fP * source2, const \fBnovas_frame\fP * frame)"
Returns the angular separation of two objects from the observer's point of view\&. The calculated separation includes light-time corrections, aberration and gravitational deflection for both sources, and thus represents a precise observed separation between the two sources\&.
.PP
\fBParameters\fP
.RS 4
\fIsource1\fP An observed source 
.br
\fIsource2\fP Another observed source 
.br
\fIframe\fP Observing frame, defining the observer location and astronomical time of observation\&. 
.RE
.PP
\fBReturns\fP
.RS 4
[deg] Apparent angular separation between the two observed sources from the observer's point-of-view\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_sun_angle()\fP 
.PP
\fBnovas_moon_angle()\fP 
.PP
\fBnovas_sep()\fP 
.RE
.PP

.PP
References \fBsky_pos::dec\fP, \fBsky_pos::dis\fP, \fBnovas_equ_sep()\fP, \fBNOVAS_GCRS\fP, \fBnovas_sky_pos()\fP, and \fBsky_pos::ra\fP\&.
.SS "double novas_rises_above (double el, const \fBobject\fP * source, const \fBnovas_frame\fP * frame, \fBRefractionModel\fP ref_model)"
Returns the UTC date at which a distant source appears to rise above the specified elevation angle\&. The calculated time will account for the (slow) motion for Solar-system bodies, and optionally for atmospheric refraction also\&.
.PP
NOTES: 
.PD 0
.IP "1." 4
The current implementation is not suitable for calculating the nearest successive rise times for near-Earth objects, at or within the geostationary orbit\&. 
.PP
.PP
\fBParameters\fP
.RS 4
\fIel\fP [deg] Elevation angle\&. 
.br
\fIsource\fP Observed source 
.br
\fIframe\fP Observing frame, defining the observer location and astronomical time of observation\&. 
.br
\fIref_model\fP Refraction model, or NULL to calculate unrefracted rise time\&. 
.RE
.PP
\fBReturns\fP
.RS 4
[day] UTC-based Julian date at which the object rises above the specified elevation next after the specified date, or else NAN if the source stays above or below the given elevation for the entire 24-hour period\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_sets_below()\fP 
.PP
\fBnovas_transit_time()\fP 
.RE
.PP

.SS "double novas_sets_below (double el, const \fBobject\fP * source, const \fBnovas_frame\fP * frame, \fBRefractionModel\fP ref_model)"
Returns the UTC date at which a distant source appears to set below the specified elevation angle\&. The calculated time will account for the (slow) motion of Solar-system bodies, and optionally for atmopsheric refraction also\&.
.PP
NOTES: 
.PD 0
.IP "1." 4
The current implementation is not suitable for calculating the nearest successive set times for near-Earth objects, at or within the geostationary orbit\&. 
.PP
.PP
\fBParameters\fP
.RS 4
\fIel\fP [deg] Elevation angle\&. 
.br
\fIsource\fP Observed source 
.br
\fIframe\fP Observing frame, defining the observer location and astronomical time of observation\&. 
.br
\fIref_model\fP Refraction model, or NULL to calculate unrefracted setting time\&. 
.RE
.PP
\fBReturns\fP
.RS 4
[day] UTC-based Julian date at which the object sets below the specified elevation next after the specified date, or else NAN if the source stays above or below the given elevation for the entire 24-hour day\&.\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_rises_above()\fP 
.PP
\fBnovas_transit_time()\fP 
.RE
.PP

.SS "int novas_sky_pos (const \fBobject\fP * object, const \fBnovas_frame\fP * frame, enum \fBnovas_reference_system\fP sys, \fBsky_pos\fP * out)"
Calculates an apparent location on sky for the source\&. The position takes into account the proper motion (for sidereal soure), or is antedated for light-travel time (for Solar-System bodies)\&. It also applies an appropriate aberration correction and gravitational deflection of the light\&.
.PP
To calculate corresponding local horizontal coordinates, you can pass the output RA/Dec coordinates to \fBnovas_app_to_hor()\fP\&. Or to calculate apparent coordinates in other systems, you may pass the result to novas_transform_sy_pos() after\&.
.PP
And if you want geometric positions instead (not corrected for aberration or gravitational deflection), you may want to use \fBnovas_geom_posvel()\fP instead\&.
.PP
The approximate 'inverse' of this function is \fBnovas_app_to_geom()\fP\&.
.PP
This function implements the same aberration and gravitational deflection corrections as \fC\fBplace()\fP\fP, but at reduced computational cost\&. See \fC\fBplace()\fP\fP for references\&. Unlike \fC\fBplace()\fP\fP, however, the output always reports the distance calculated from the parallax for sidereal sources\&. Note also, that while \fC\fBplace()\fP\fP does not apply aberration and gravitational deflection corrections when \fCsys\fP is NOVAS_ICRS (3), this routine will apply those corrections consistently for all coordinate systems (and you can use \fBnovas_geom_posvel()\fP instead to get positions without aberration or deflection in any system)\&.
.PP
NOTES: 
.PD 0
.IP "1." 4
If \fCsys\fP is \fCNOVAS_TOD\fP (true equator and equinox of date), the less precise old (pre IAU 2006) method is used, with the Lieske et al\&. 1977 nutation model, matching the behavior of the original NOVAS C \fBplace()\fP for that system\&. To obtain more precise TOD coordinates, set \fCsys\fP to \fCNOVAS_CIRS\fP here, and follow with \fBcirs_to_tod()\fP / \fBcirs_to_app_ra()\fP on the \fCout->r_hat\fP / \fCout->ra\fP respectively after (or you can use just convert one of the quantities, and use \fBradec2vector()\fP or \fBvector2radec()\fP to get the other even faster)\&. 
.IP "2." 4
As of SuperNOVAS v1\&.3, the returned radial velocity component is a proper observer-based spectroscopic measure\&. In prior releases, and in NOVAS C 3\&.1, this was inconsistent, with LSR-based measures being returned for catalog sources\&. 
.PP
.PP
\fBParameters\fP
.RS 4
\fIobject\fP Pointer to a celestial object data structure that is observed\&. Catalog sources should have coordinates and properties in ICRS\&. You can use \fC\fBtransform_cat()\fP\fP to convert catalog entries to ICRS as necessary\&. 
.br
\fIframe\fP The observer frame, defining the location and time of observation 
.br
\fIsys\fP The coordinate system in which to return the apparent sky location 
.br
\fIout\fP Pointer to the data structure which is populated with the calculated apparent location in the designated coordinate system\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, 50--70 error is 50 + error from \fBlight_time2()\fP, 70--80 error is 70 + error from \fBgrav_def()\fP, or else -1 (errno will indicate the type of error)\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_geom_to_app()\fP 
.PP
\fBnovas_app_to_hor()\fP 
.PP
\fBplace()\fP 
.PP
\fBcirs_to_tod()\fP 
.PP
\fBcirs_to_app_ra()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBnovas_frame::accuracy\fP, \fBsky_pos::dis\fP, \fBnovas_frame::earth_pos\fP, \fBgrav_planets()\fP, \fBNOVAS_CATALOG_OBJECT\fP, \fBNOVAS_FULL_ACCURACY\fP, \fBnovas_geom_posvel()\fP, \fBnovas_geom_to_app()\fP, \fBNOVAS_ICRS\fP, \fBNOVAS_REDUCED_ACCURACY\fP, \fBnovas_frame::obs_pos\fP, \fBnovas_frame::obs_vel\fP, \fBnovas_frame::planets\fP, \fBrad_vel2()\fP, \fBsky_pos::rv\fP, \fBnovas_frame::sun_pos\fP, and \fBobject::type\fP\&.
.SS "double novas_solar_illum (const \fBobject\fP * source, const \fBnovas_frame\fP * frame)"
Returns the Solar illumination fraction of a source, assuming a spherical geometry for the observed body\&.
.PP
\fBParameters\fP
.RS 4
\fIsource\fP Observed source\&. Usually a Solar-system source\&. (For other source types, 1\&.0 is returned by default\&.) 
.br
\fIframe\fP Observing frame, defining the observer location and astronomical time of observation\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Solar illumination fraction [0\&.0:1\&.0] of a spherical body observed at the source location from the given observer location, or NAN if there was an error (errno will indicate the type of error)\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBNOVAS_CATALOG_OBJECT\fP, \fBnovas_geom_posvel()\fP, \fBNOVAS_ICRS\fP, \fBnovas_frame::obs_pos\fP, \fBnovas_frame::sun_pos\fP, and \fBobject::type\fP\&.
.SS "double novas_sun_angle (const \fBobject\fP * source, const \fBnovas_frame\fP * frame)"
Returns the apparent angular distance of a source from the Sun from the observer's point of view\&.
.PP
\fBParameters\fP
.RS 4
\fIsource\fP An observed source 
.br
\fIframe\fP Observing frame, defining the observer location and astronomical time of observation\&. 
.RE
.PP
\fBReturns\fP
.RS 4
[deg] the apparent angular distance between the source an the Sun, from the observer's point of view
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_moon_angle()\fP 
.RE
.PP

.PP
References \fBnovas_object_sep()\fP, and \fBNOVAS_SUN_INIT\fP\&.
.SS "int novas_track_pos (const \fBnovas_track\fP * track, const \fBnovas_timespec\fP * time, double * lon, double * lat, double * dist, double * z)"
Calculates a projected position and redshift for a source, given the available tracking position and derivatives\&. Using 'tracks' to project positions can be much faster than the repeated full recalculation of the source position over some short period\&.
.PP
In SuperNOVAS terminology a 'track' is a 2nd order Taylor series expansion of the observed position and redshift in time\&. For most but the fastest moving sources, horizontal (Az/El) tracks are sufficiently precise on minute timescales, whereas depending on the type of source equatorial tracks can be precise for up to days\&.
.PP
\fBParameters\fP
.RS 4
\fItrack\fP Tracking position and motion (first and second derivatives) 
.br
\fItime\fP Astrometric time of observation 
.br
\fIlon\fP [deg] projected observed Eastward longitude in tracking coordinate system 
.br
\fIlat\fP [deg] projected observed latitude in tracking coordinate system 
.br
\fIdist\fP [AU] projected apparent distance to source from observer 
.br
\fIz\fP projected observed redshift 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else -1 if either input pointer is NULL (errno is set to EINVAL)\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_equ_track()\fP 
.PP
\fBnovas_hor_track()\fP 
.PP
\fBnovas_z2v()\fP 
.RE
.PP

.PP
References \fBnovas_track::accel\fP, \fBnovas_observable::dist\fP, \fBnovas_observable::lat\fP, \fBnovas_observable::lon\fP, \fBnovas_diff_time()\fP, \fBnovas_track::pos\fP, \fBnovas_track::rate\fP, \fBnovas_track::time\fP, and \fBnovas_observable::z\fP\&.
.SS "int novas_transform_sky_pos (const \fBsky_pos\fP * in, const \fBnovas_transform\fP * transform, \fBsky_pos\fP * out)"
Transforms a position or velocity 3-vector from one coordinate reference system to another\&.
.PP
\fBParameters\fP
.RS 4
\fIin\fP Input apparent position on sky in the original coordinate reference system 
.br
\fItransform\fP Pointer to a coordinate transformation matrix 
.br
\fIout\fP Output apparent position on sky in the new coordinate reference system\&. It may be the same as the input\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else -1 if there was an error (errno will indicate the type of error)\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_make_transform()\fP 
.PP
\fBnovas_transform_vector()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBsky_pos::dec\fP, \fBnovas_transform::matrix\fP, \fBsky_pos::r_hat\fP, \fBsky_pos::ra\fP, and \fBvector2radec()\fP\&.
.SS "int novas_transform_vector (const double * in, const \fBnovas_transform\fP * transform, double * out)"
Transforms a position or velocity 3-vector from one coordinate reference system to another\&.
.PP
\fBParameters\fP
.RS 4
\fIin\fP Input 3-vector in the original coordinate reference system 
.br
\fItransform\fP Pointer to a coordinate transformation matrix 
.br
\fIout\fP Output 3-vector in the new coordinate reference system\&. It may be the same as the input\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else -1 if there was an error (errno will indicate the type of error)\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_make_transform()\fP 
.PP
novas_transform_skypos()
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBnovas_transform::matrix\fP\&.
.SS "double novas_transit_time (const \fBobject\fP * source, const \fBnovas_frame\fP * frame)"
Returns the UTC date at which a source transits the local meridian\&. The calculated time will account for the (slow) motion of Solar-system bodies\&.
.PP
NOTES: 
.PD 0
.IP "1." 4
The current implementation is not suitable for calculating the nearest successive transit times for near-Earth objects, at or within the geostationary orbit\&. 
.PP
.PP
\fBParameters\fP
.RS 4
\fIsource\fP Observed source 
.br
\fIframe\fP Observing frame, defining the observer location and astronomical time of observation\&. 
.RE
.PP
\fBReturns\fP
.RS 4
[day] UTC-based Julian date at which the object transits the local meridian next after the specified date, or NAN if either input pointer is NULL\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_rises_above()\fP 
.PP
\fBnovas_sets_below()\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for SuperNOVAS from the source code\&.
