.TH "src/coords.c" 3 "Version v1.3" "SuperNOVAS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/coords.c
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBecl2equ\fP (double jd_tt, enum \fBnovas_equator_type\fP coord_sys, enum \fBnovas_accuracy\fP accuracy, double elon, double elat, double *restrict ra, double *restrict dec)"
.br
.ti -1c
.RI "short \fBecl2equ_vec\fP (double jd_tt, enum \fBnovas_equator_type\fP coord_sys, enum \fBnovas_accuracy\fP accuracy, const double *in, double *out)"
.br
.ti -1c
.RI "short \fBequ2ecl\fP (double jd_tt, enum \fBnovas_equator_type\fP coord_sys, enum \fBnovas_accuracy\fP accuracy, double ra, double dec, double *restrict elon, double *restrict elat)"
.br
.ti -1c
.RI "short \fBequ2ecl_vec\fP (double jd_tt, enum \fBnovas_equator_type\fP coord_sys, enum \fBnovas_accuracy\fP accuracy, const double *in, double *out)"
.br
.ti -1c
.RI "int \fBequ2gal\fP (double ra, double dec, double *restrict glon, double *restrict glat)"
.br
.ti -1c
.RI "int \fBequ2hor\fP (double jd_ut1, double ut1_to_tt, enum \fBnovas_accuracy\fP accuracy, double xp, double yp, const \fBon_surface\fP *restrict location, double ra, double dec, enum \fBnovas_refraction_model\fP ref_option, double *restrict zd, double *restrict az, double *restrict rar, double *restrict decr)"
.br
.ti -1c
.RI "int \fBgal2equ\fP (double glon, double glat, double *restrict ra, double *restrict dec)"
.br
.ti -1c
.RI "int \fBhor_to_itrs\fP (const \fBon_surface\fP *restrict location, double az, double za, double *restrict itrs)"
.br
.ti -1c
.RI "int \fBitrs_to_hor\fP (const \fBon_surface\fP *restrict location, const double *restrict itrs, double *restrict az, double *restrict za)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBDate\fP
.RS 4
Created on Mar 5, 2025 
.RE
.PP
\fBAuthor\fP
.RS 4
G\&. Kaplan and Attila Kovacs
.RE
.PP
Various transformations between different coordinate systems 
.SH "Function Documentation"
.PP 
.SS "int ecl2equ (double jd_tt, enum \fBnovas_equator_type\fP coord_sys, enum \fBnovas_accuracy\fP accuracy, double elon, double elat, double *restrict ra, double *restrict dec)"
Convert ecliptic longitude and latitude to right ascension and declination\&. To convert GCRS ecliptic coordinates (mean ecliptic and equinox of J2000\&.0), set 'coord_sys' to \fBNOVAS_GCRS_EQUATOR(2)\fP; in this case the value of 'jd_tt' can be set to anything, since J2000\&.0 is assumed\&. Otherwise, all input coordinates are dynamical at'jd_tt'\&.
.PP
\fBParameters\fP
.RS 4
\fIjd_tt\fP [day] Terrestrial Time (TT) based Julian date\&. (Unused if 'coord_sys' is NOVAS_GCRS_EQUATOR[2]) 
.br
\fIcoord_sys\fP The astrometric reference system of the coordinates\&. If 'coord_sys' is \fBNOVAS_GCRS_EQUATOR(2)\fP, the input GCRS coordinates are converted to J2000 ecliptic coordinates\&. 
.br
\fIaccuracy\fP NOVAS_FULL_ACCURACY (0) or NOVAS_REDUCED_ACCURACY (1) 
.br
\fIelon\fP [deg] Ecliptic longitude in degrees, referred to specified ecliptic and equinox of date\&. 
.br
\fIelat\fP [deg] Ecliptic latitude in degrees, referred to specified ecliptic and equinox of date\&. 
.br
\fIra\fP [h] Right ascension in hours, referred to specified equator and equinox of date\&. 
.br
\fIdec\fP [deg] Declination in degrees, referred to specified equator and equinox of date\&.
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else 1 if the value of 'coord_sys' is invalid\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBecl2equ_vec()\fP 
.PP
\fBequ2ecl()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.0 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBecl2equ_vec()\fP\&.
.SS "short ecl2equ_vec (double jd_tt, enum \fBnovas_equator_type\fP coord_sys, enum \fBnovas_accuracy\fP accuracy, const double * in, double * out)"
Converts an ecliptic position vector to an equatorial position vector\&. To convert ecliptic coordinates (mean ecliptic and equinox of J2000\&.0) to GCRS RA and dec to, set 'coord_sys' to \fBNOVAS_GCRS_EQUATOR(2)\fP; in this case the value of 'jd_tt' can be set to anything, since J2000\&.0 is assumed\&. Otherwise, all input coordinates are dynamical at 'jd_tt'\&.
.PP
\fBParameters\fP
.RS 4
\fIjd_tt\fP [day] Terrestrial Time (TT) based Julian date\&. (Unused if 'coord_sys' is NOVAS_GCRS_EQUATOR[2]) 
.br
\fIcoord_sys\fP The astrometric reference system type of the coordinates 
.br
\fIaccuracy\fP NOVAS_FULL_ACCURACY (0) or NOVAS_REDUCED_ACCURACY (1) 
.br
\fIin\fP Position vector, referred to specified ecliptic and equinox of date\&. 
.br
\fIout\fP Position vector, referred to specified equator and equinox of date\&. It can be the same vector as the input\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, -1 if either vector argument is NULL or the accuracy is invalid, or else 1 if the value of 'coord_sys' is invalid\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBecl2equ()\fP 
.PP
\fBequ2ecl_vec()\fP 
.RE
.PP

.PP
References \fBe_tilt()\fP, \fBframe_tie()\fP, \fBJ2000_TO_ICRS\fP, \fBmean_obliq()\fP, \fBNOVAS_FULL_ACCURACY\fP, \fBNOVAS_GCRS_EQUATOR\fP, \fBNOVAS_MEAN_EQUATOR\fP, \fBNOVAS_REDUCED_ACCURACY\fP, \fBNOVAS_TRUE_EQUATOR\fP, and \fBtt2tdb()\fP\&.
.SS "short equ2ecl (double jd_tt, enum \fBnovas_equator_type\fP coord_sys, enum \fBnovas_accuracy\fP accuracy, double ra, double dec, double *restrict elon, double *restrict elat)"
Convert right ascension and declination to ecliptic longitude and latitude\&. To convert GCRS RA and dec to ecliptic coordinates (mean ecliptic and equinox of J2000\&.0), set 'coord_sys' to \fBNOVAS_GCRS_EQUATOR(2)\fP; in this case the value of 'jd_tt' can be set to anything, since J2000\&.0 is assumed\&. Otherwise, all input coordinates are dynamical at 'jd_tt'\&.
.PP
\fBParameters\fP
.RS 4
\fIjd_tt\fP [day] Terrestrial Time (TT) based Julian date\&. (Unused if 'coord_sys' is NOVAS_GCRS_EQUATOR[2]) 
.br
\fIcoord_sys\fP The astrometric reference system of the coordinates\&. If 'coord_sys' is \fBNOVAS_GCRS_EQUATOR(2)\fP, the input GCRS coordinates are converted to J2000 ecliptic coordinates\&. 
.br
\fIaccuracy\fP NOVAS_FULL_ACCURACY (0) or NOVAS_REDUCED_ACCURACY (1) 
.br
\fIra\fP [h] Right ascension in hours, referred to specified equator and equinox of date\&. 
.br
\fIdec\fP [deg] Declination in degrees, referred to specified equator and equinox of date\&. 
.br
\fIelon\fP [deg] Ecliptic longitude in degrees, referred to specified ecliptic and equinox of date\&. 
.br
\fIelat\fP [deg] Ecliptic latitude in degrees, referred to specified ecliptic and equinox of date\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else 1 if the value of 'coord_sys' is invalid\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBequ2ecl_vec()\fP 
.PP
\fBecl2equ()\fP 
.RE
.PP

.PP
References \fBequ2ecl_vec()\fP\&.
.SS "short equ2ecl_vec (double jd_tt, enum \fBnovas_equator_type\fP coord_sys, enum \fBnovas_accuracy\fP accuracy, const double * in, double * out)"
Converts an equatorial position vector to an ecliptic position vector\&. To convert ICRS RA and dec to ecliptic coordinates (mean ecliptic and equinox of J2000\&.0), set 'coord_sys' to \fBNOVAS_GCRS_EQUATOR(2)\fP; in this case the value of 'jd_tt' can be set to anything, since J2000\&.0 is assumed\&. Otherwise, all input coordinates are dynamical at 'jd_tt'\&.
.PP
\fBParameters\fP
.RS 4
\fIjd_tt\fP [day] Terrestrial Time (TT) based Julian date\&. (Unused if 'coord_sys' is NOVAS_GCRS_EQUATOR[2]) 
.br
\fIcoord_sys\fP The astrometric reference system type of the coordinates\&. 
.br
\fIaccuracy\fP NOVAS_FULL_ACCURACY (0) or NOVAS_REDUCED_ACCURACY (1) 
.br
\fIin\fP Position vector, referred to specified equator and equinox of date\&. 
.br
\fIout\fP Position vector, referred to specified ecliptic and equinox of date\&. It can be the same vector as the input\&. If 'coord_sys' is \fBNOVAS_GCRS_EQUATOR(2)\fP, the input GCRS coordinates are converted to J2000 ecliptic coordinates\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, -1 if either vector argument is NULL or the accuracy is invalid, or else 1 if the value of 'coord_sys' is invalid\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBequ2ecl()\fP 
.PP
\fBecl2equ_vec()\fP 
.RE
.PP

.PP
References \fBe_tilt()\fP, \fBframe_tie()\fP, \fBICRS_TO_J2000\fP, \fBmean_obliq()\fP, \fBNOVAS_FULL_ACCURACY\fP, \fBNOVAS_GCRS_EQUATOR\fP, \fBNOVAS_MEAN_EQUATOR\fP, \fBNOVAS_REDUCED_ACCURACY\fP, \fBNOVAS_TRUE_EQUATOR\fP, and \fBtt2tdb()\fP\&.
.SS "int equ2gal (double ra, double dec, double *restrict glon, double *restrict glat)"
Converts ICRS right ascension and declination to galactic longitude and latitude\&.
.PP
REFERENCES: 
.PD 0
.IP "1." 4
Hipparcos and Tycho Catalogues, Vol\&. 1, Section 1\&.5\&.3\&. 
.PP
.PP
\fBParameters\fP
.RS 4
\fIra\fP [h] ICRS right ascension in hours\&. 
.br
\fIdec\fP [deg] ICRS declination in degrees\&. 
.br
\fIglon\fP [deg] Galactic longitude in degrees\&. 
.br
\fIglat\fP [deg] Galactic latitude in degrees\&.
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or -1 if either of the output pointer arguments are NULL\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBgal2equ()\fP 
.RE
.PP

.SS "int equ2hor (double jd_ut1, double ut1_to_tt, enum \fBnovas_accuracy\fP accuracy, double xp, double yp, const \fBon_surface\fP *restrict location, double ra, double dec, enum \fBnovas_refraction_model\fP ref_option, double *restrict zd, double *restrict az, double *restrict rar, double *restrict decr)"
Transforms topocentric (TOD) right ascension and declination to zenith distance and azimuth\&. This method should not be used to convert CIRS apparent coordinates (IAU 2000 standard) -- for those you should use \fBcirs_to_itrs()\fP followed by \fBitrs_to_hor()\fP instead\&.
.PP
It uses a method that properly accounts for polar motion, which is significant at the sub-arcsecond level\&. This function can also adjust coordinates for atmospheric refraction\&.
.PP
\fBDeprecated\fP
.RS 4
The name of this function does not reveal what type of equatorial coordinates it requires\&. To make it less ambiguous, you should use \fBtod_to_itrs()\fP followed by \fBitrs_to_hor()\fP instead, possibly following it with \fBrefract_astro()\fP if you also want to apply optical refraction\&.
.RE
.PP
.PP
NOTES: 
.PD 0
.IP "\(bu" 2
'xp' and 'yp' can be set to zero if sub-arcsecond accuracy is not needed\&. 
.IP "\(bu" 2
The directions 'zd'= 0 (zenith) and 'az'= 0 (north) are here considered fixed in the terrestrial system\&. Specifically, the zenith is along the geodetic normal, and north is toward the ITRS pole\&. 
.IP "\(bu" 2
If 'ref_option' is NOVAS_STANDARD_ATMOSPHERE (1), then 'rar'='ra' and 'decr'='dec'\&. 
.PP
.PP
REFERENCES: 
.PD 0
.IP "1." 4
Kaplan, G\&. (2008)\&. USNO/AA Technical Note of 28 Apr 2008, 'Refraction as a Vector\&.' 
.PP
.PP
\fBParameters\fP
.RS 4
\fIjd_ut1\fP [day] UT1 based Julian date 
.br
\fIut1_to_tt\fP [s] TT - UT1 Time difference in seconds 
.br
\fIaccuracy\fP NOVAS_FULL_ACCURACY (0) or NOVAS_REDUCED_ACCURACY (1) 
.br
\fIxp\fP [arcsec] Conventionally-defined x coordinate of celestial intermediate pole with respect to ITRS reference pole, in arcseconds\&. 
.br
\fIyp\fP [arcsec] Conventionally-defined y coordinate of celestial intermediate pole with respect to ITRS reference pole, in arcseconds\&. 
.br
\fIlocation\fP The observer location 
.br
\fIra\fP [h] Topocentric right ascension of object of interest, in hours, referred to true equator and equinox of date\&. 
.br
\fIdec\fP [deg] Topocentric declination of object of interest, in degrees, referred to true equator and equinox of date\&. 
.br
\fIref_option\fP NOVAS_STANDARD_ATMOSPHERE (1), or NOVAS_WEATHER_AT_LOCATION (2) if to use the weather 
.br
\fIzd\fP [deg] Topocentric zenith distance in degrees (unrefracted)\&. 
.br
\fIaz\fP [deg] Topocentric azimuth (measured east from north) in degrees\&. 
.br
\fIrar\fP [h] Topocentric right ascension of object of interest, in hours, referred to true equator and equinox of date, affected by refraction if 'ref_option' is non-zero\&. (It may be NULL if not required) 
.br
\fIdecr\fP [deg] Topocentric declination of object of interest, in degrees, referred to true equator and equinox of date\&. (It may be NULL if not required) 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or -1 if one of the 'zd' or 'az' output pointers are NULL\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBitrs_to_hor()\fP 
.PP
\fBtod_to_itrs()\fP 
.PP
\fBNOVAS_TOD\fP 
.RE
.PP

.PP
References \fBEROT_GST\fP, \fBNOVAS_DYNAMICAL_CLASS\fP, \fBrefract_astro()\fP, and \fBter2cel()\fP\&.
.SS "int gal2equ (double glon, double glat, double *restrict ra, double *restrict dec)"
Converts galactic longitude and latitude to ICRS right ascension and declination\&.
.PP
REFERENCES: 
.PD 0
.IP "1." 4
Hipparcos and Tycho Catalogues, Vol\&. 1, Section 1\&.5\&.3\&. 
.PP
.PP
\fBParameters\fP
.RS 4
\fIglon\fP [deg] Galactic longitude in degrees\&. 
.br
\fIglat\fP [deg] Galactic latitude in degrees\&. 
.br
\fIra\fP [h] ICRS right ascension in hours\&. 
.br
\fIdec\fP [deg] ICRS declination in degrees\&.
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or -1 if either of the output pointer arguments are NULL\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBequ2gal()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.0 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.SS "int hor_to_itrs (const \fBon_surface\fP *restrict location, double az, double za, double *restrict itrs)"
Converts astrometric (unrefracted) azimuth and zenith angles at the specified observer location to a unit position vector in the Earth-fixed ITRS frame\&.
.PP
\fBParameters\fP
.RS 4
\fIlocation\fP Observer location on Earth 
.br
\fIaz\fP [deg] astrometric azimuth angle at observer location [0:360]\&. It may be NULL if not required\&. 
.br
\fIza\fP [deg] astrometric zenith angle at observer location [0:180]\&. It may be NULL if not required\&. 
.br
\fIitrs\fP Unit 3-vector direction in Earth-fixed ITRS frame 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else -1 if the location or the input vector is NULL\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBitrs_to_hor()\fP 
.PP
\fBitrs_to_cirs()\fP 
.PP
\fBitrs_to_tod()\fP 
.PP
\fBrefract()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.0 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.SS "int itrs_to_hor (const \fBon_surface\fP *restrict location, const double *restrict itrs, double *restrict az, double *restrict za)"
Converts a position vector in the Earth-fixed ITRS frame to astrometric (unrefracted) azimuth and zenith angles at the specified observer location\&.
.PP
\fBParameters\fP
.RS 4
\fIlocation\fP Observer location on Earth 
.br
\fIitrs\fP 3-vector position in Earth-fixed ITRS frame 
.br
\fIaz\fP [deg] astrometric azimuth angle at observer location [0:360]\&. It may be NULL if not required\&. 
.br
\fIza\fP [deg] astrometric zenith angle at observer location [0:180]\&. It may be NULL if not required\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else -1 if the location or the input vector is NULL\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBhor_to_itrs()\fP 
.PP
\fBcirs_to_itrs()\fP 
.PP
\fBtod_to_itrs()\fP 
.PP
\fBrefract_astro()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.0 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for SuperNOVAS from the source code\&.
