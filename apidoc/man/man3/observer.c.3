.TH "src/observer.c" 3 "Version v1.3" "SuperNOVAS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/observer.c
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBaberration\fP (const double *pos, const double *vobs, double lighttime, double *out)"
.br
.ti -1c
.RI "int \fBbary2obs\fP (const double *pos, const double *pos_obs, double *out, double *restrict lighttime)"
.br
.ti -1c
.RI "short \fBlight_time\fP (double jd_tdb, const \fBobject\fP *restrict body, const double *pos_obs, double tlight0, enum \fBnovas_accuracy\fP accuracy, double *pos_src_obs, double *restrict tlight)"
.br
.ti -1c
.RI "int \fBlight_time2\fP (double jd_tdb, const \fBobject\fP *restrict body, const double *restrict pos_obs, double tlight0, enum \fBnovas_accuracy\fP accuracy, double *p_src_obs, double *restrict v_ssb, double *restrict tlight)"
.br
.ti -1c
.RI "int \fBmake_airborne_observer\fP (const \fBon_surface\fP *location, const double *vel, \fBobserver\fP *obs)"
.br
.ti -1c
.RI "int \fBmake_in_space\fP (const double *sc_pos, const double *sc_vel, \fBin_space\fP *loc)"
.br
.ti -1c
.RI "short \fBmake_observer\fP (enum \fBnovas_observer_place\fP where, const \fBon_surface\fP *loc_surface, const \fBin_space\fP *loc_space, \fBobserver\fP *obs)"
.br
.ti -1c
.RI "int \fBmake_observer_at_geocenter\fP (\fBobserver\fP *restrict obs)"
.br
.ti -1c
.RI "int \fBmake_observer_in_space\fP (const double *sc_pos, const double *sc_vel, \fBobserver\fP *obs)"
.br
.ti -1c
.RI "int \fBmake_observer_on_surface\fP (double latitude, double longitude, double height, double temperature, double pressure, \fBobserver\fP *restrict obs)"
.br
.ti -1c
.RI "int \fBmake_on_surface\fP (double latitude, double longitude, double height, double temperature, double pressure, \fBon_surface\fP *restrict loc)"
.br
.ti -1c
.RI "int \fBmake_solar_system_observer\fP (const double *sc_pos, const double *sc_vel, \fBobserver\fP *obs)"
.br
.ti -1c
.RI "int \fBnovas_e2h_offset\fP (double dra, double ddec, double pa, double *restrict daz, double *restrict del)"
.br
.ti -1c
.RI "double \fBnovas_epa\fP (double ha, double dec, double lat)"
.br
.ti -1c
.RI "int \fBnovas_h2e_offset\fP (double daz, double del, double pa, double *restrict dra, double *restrict ddec)"
.br
.ti -1c
.RI "double \fBnovas_hpa\fP (double az, double el, double lat)"
.br
.ti -1c
.RI "int \fBnovas_los_to_xyz\fP (const double *los, double lon, double lat, double *xyz)"
.br
.ti -1c
.RI "int \fBnovas_uvw_to_xyz\fP (const double *uvw, double ha, double dec, double *xyz)"
.br
.ti -1c
.RI "int \fBnovas_xyz_to_los\fP (const double *xyz, double lon, double lat, double *los)"
.br
.ti -1c
.RI "int \fBnovas_xyz_to_uvw\fP (const double *xyz, double ha, double dec, double *uvw)"
.br
.ti -1c
.RI "int \fBobs_planets\fP (double jd_tdb, enum \fBnovas_accuracy\fP accuracy, const double *restrict pos_obs, int pl_mask, \fBnovas_planet_bundle\fP *restrict planets)"
.br
.ti -1c
.RI "int \fBobs_posvel\fP (double jd_tdb, double ut1_to_tt, enum \fBnovas_accuracy\fP accuracy, const \fBobserver\fP *restrict obs, const double *restrict geo_pos, const double *restrict geo_vel, double *restrict pos, double *restrict vel)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBDate\fP
.RS 4
Created on Mar 6, 2025 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs and G\&. Kaplan
.RE
.PP
Function that define an astronomical observer location or are related to observer location\&. 
.SH "Function Documentation"
.PP 
.SS "int aberration (const double * pos, const double * vobs, double lighttime, double * out)"
Corrects position vector for aberration of light\&. Algorithm includes relativistic terms\&.
.PP
NOTES: 
.PD 0
.IP "1." 4
This function is called by \fBplace()\fP to account for aberration when calculating the position of the source\&. 
.PP
.PP
REFERENCES: 
.PD 0
.IP "1." 4
Murray, C\&. A\&. (1981) Mon\&. Notices Royal Ast\&. Society 195, 639-648\&. 
.IP "2." 4
Kaplan, G\&. H\&. et\&. al\&. (1989)\&. Astron\&. Journ\&. 97, 1197-1210\&. 
.PP
.PP
\fBParameters\fP
.RS 4
\fIpos\fP [AU] Position vector of source relative to observer 
.br
\fIvobs\fP [AU/day] Velocity vector of observer, relative to the solar system barycenter, components in AU/day\&. 
.br
\fIlighttime\fP [day] Light time from object to Earth in days (if known)\&. Or set to 0, and this function will compute it\&. 
.br
\fIout\fP [AU] Position vector, referred to origin at center of mass of the Earth, corrected for aberration, components in AU\&. It can be the same vector as one of the inputs\&.
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or -1 if any of the vector arguments are NULL\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBplace()\fP 
.RE
.PP

.PP
References \fBnovas_vlen()\fP\&.
.SS "int bary2obs (const double * pos, const double * pos_obs, double * out, double *restrict lighttime)"
Moves the origin of coordinates from the barycenter of the solar system to the observer (or the geocenter); i\&.e\&., this function accounts for parallax (annual+geocentric or just annual)\&.
.PP
REFERENCES: 
.PD 0
.IP "1." 4
Kaplan, G\&. H\&. et\&. al\&. (1989)\&. Astron\&. Journ\&. 97, 1197-1210\&. 
.PP
.PP
\fBParameters\fP
.RS 4
\fIpos\fP [AU] Position vector, referred to origin at solar system barycenter, components in AU\&. 
.br
\fIpos_obs\fP [AU] Position vector of observer (or the geocenter), with respect to origin at solar system barycenter, components in AU\&. 
.br
\fIout\fP [AU] Position vector, referred to origin at center of mass of the Earth, components in AU\&. It may be NULL if not required, or be the same vector as either of the inputs\&. 
.br
\fIlighttime\fP [day] Light time from object to Earth in days\&. It may be NULL if not required\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or -1 if any of the essential pointer arguments is NULL\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBplace()\fP 
.PP
\fBlight_time2()\fP 
.RE
.PP

.PP
References \fBnovas_vlen()\fP\&.
.SS "short light_time (double jd_tdb, const \fBobject\fP *restrict body, const double * pos_obs, double tlight0, enum \fBnovas_accuracy\fP accuracy, double * pos_src_obs, double *restrict tlight)"
Computes the geocentric position of a solar system body, as antedated for light-time\&.
.PP
\fBParameters\fP
.RS 4
\fIjd_tdb\fP [day] Barycentric Dynamical Time (TDB) based Julian date 
.br
\fIbody\fP Pointer to structure containing the designation for the solar system body 
.br
\fIpos_obs\fP [AU] Position 3-vector of observer (or the geocenter), with respect to origin at solar system barycenter, referred to ICRS axes, components in AU\&. 
.br
\fItlight0\fP [day] First approximation to light-time, in days (can be set to 0\&.0 if unknown)\&. 
.br
\fIaccuracy\fP NOVAS_FULL_ACCURACY (0) or NOVAS_REDUCED_ACCURACY (1) 
.br
\fIpos_src_obs\fP [AU] Position 3-vector of body, with respect to origin at observer (or the geocenter), referred to ICRS axes, components in AU\&. It can be the same vector as either of the inputs\&. 
.br
\fItlight\fP [day] Calculated light time
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, -1 if any of the poiinter arguments is NULL, 1 if the algorithm failed to converge after 10 iterations, or 10 + the error from \fBephemeris()\fP\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBlight_time2()\fP 
.PP
\fBplace()\fP 
.RE
.PP

.PP
References \fBlight_time2()\fP\&.
.SS "int light_time2 (double jd_tdb, const \fBobject\fP *restrict body, const double *restrict pos_obs, double tlight0, enum \fBnovas_accuracy\fP accuracy, double * p_src_obs, double *restrict v_ssb, double *restrict tlight)"
Computes the geocentric position and velocity of a solar system body, as antedated for light-time\&. It is effectively the same as the original NOVAS C \fBlight_time()\fP, except that this returns the antedated source velocity vector also\&.
.PP
NOTES: 
.PD 0
.IP "1." 4
This function is called by \fBplace()\fP to calculate observed positions, radial velocity, and distance for the time when the observed light originated from the source\&. 
.PP
.PP
\fBParameters\fP
.RS 4
\fIjd_tdb\fP [day] Barycentric Dynamical Time (TDB) based Julian date 
.br
\fIbody\fP Pointer to structure containing the designation for the solar system body 
.br
\fIpos_obs\fP [AU] Position 3-vector of observer (or the geocenter), with respect to origin at solar system barycenter, referred to ICRS axes, components in AU\&. 
.br
\fItlight0\fP [day] First approximation to light-time, in days (can be set to 0\&.0 if unknown)\&. 
.br
\fIaccuracy\fP NOVAS_FULL_ACCURACY (0) or NOVAS_REDUCED_ACCURACY (1) 
.br
\fIp_src_obs\fP [AU] Position 3-vector of body, relative to observer, referred to ICRS axes, components in AU\&. 
.br
\fIv_ssb\fP [AU/day] Velocity 3-vector of body, with respect to the Solar-system barycenter, referred to ICRS axes, components in AU/day\&. 
.br
\fItlight\fP [day] Calculated light time, or NAN when returning with an error code\&.
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, -1 if any of the pointer arguments is NULL or if the output vectors are the same or if they are the same as pos_obs, 1 if the algorithm failed to converge after 10 iterations, or 10 + the error from \fBephemeris()\fP\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBlight_time()\fP 
.PP
\fBplace()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.0 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBbary2obs()\fP, \fBephemeris()\fP, \fBNOVAS_BARYCENTER\fP, \fBNOVAS_FULL_ACCURACY\fP, and \fBnovas_inv_max_iter\fP\&.
.SS "int make_airborne_observer (const \fBon_surface\fP * location, const double * vel, \fBobserver\fP * obs)"
Populates an 'observer' data structure for an observer moving relative to the surface of Earth, such as an airborne observer\&. Airborne observers have an earth fixed momentary location, defined by longitude, latitude, and altitude, the same was as for a stationary observer on Earth, but are moving relative to the surface, such as in an aircraft or balloon observatory\&.
.PP
\fBParameters\fP
.RS 4
\fIlocation\fP Current longitude, latitude and altitude, and local weather (temperature and pressure) 
.br
\fIvel\fP [km/s] Surface velocity\&. 
.br
\fIobs\fP Pointer to data structure to populate\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or -1 if the output argument is NULL\&.
.RE
.PP
\fBSee also\fP
.RS 4
make_observer_at geocenter() 
.PP
\fBmake_observer_in_space()\fP 
.PP
\fBmake_observer_on_surface()\fP 
.PP
\fBmake_solar_system_observer()\fP 
.PP
novas_calc_geometric_position() 
.PP
\fBplace()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBIN_SPACE_INIT\fP, \fBmake_observer()\fP, \fBNOVAS_AIRBORNE_OBSERVER\fP, and \fBin_space::sc_vel\fP\&.
.SS "int make_in_space (const double * sc_pos, const double * sc_vel, \fBin_space\fP * loc)"
Populates an '\fBin_space\fP' data structure, for an observer situated on a near-Earth spacecraft, with the provided position and velocity components\&. Both input vectors are assumed with respect to true equator and equinox of date\&.
.PP
\fBParameters\fP
.RS 4
\fIsc_pos\fP [km] Geocentric (x, y, z) position vector in km\&. NULL defaults to the origin 
.br
\fIsc_vel\fP [km/s] Geocentric (x, y, z) velocity vector in km/s\&. NULL defaults to zero speed\&. 
.br
\fIloc\fP Pointer to earth-orbit location data structure to populate\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or -1 if the output argument is NULL\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBmake_observer_in_space()\fP 
.PP
\fBmake_on_surface()\fP 
.PP
\fBIN_SPACE_INIT\fP 
.RE
.PP

.PP
References \fBin_space::sc_pos\fP, and \fBin_space::sc_vel\fP\&.
.SS "short make_observer (enum \fBnovas_observer_place\fP where, const \fBon_surface\fP * loc_surface, const \fBin_space\fP * loc_space, \fBobserver\fP * obs)"
Populates an 'observer' data structure given the parameters\&. The output data structure may be used an the the inputs to NOVAS-C function '\fBplace()\fP'\&.
.PP
\fBParameters\fP
.RS 4
\fIwhere\fP The location type of the observer 
.br
\fIloc_surface\fP Pointer to data structure that defines a location on Earth's surface\&. Used only if 'where' is NOVAS_OBSERVER_ON_EARTH, otherwise can be NULL\&. 
.br
\fIloc_space\fP Pointer to data structure that defines a near-Earth location in space\&. Used only if 'where' is NOVAS_OBSERVER_IN_EARTH_ORBIT, otherwise can be NULL\&. 
.br
\fIobs\fP Pointer to observer data structure to populate\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, -1 if a required argument is NULL, or 1 if the 'where' argument is invalid\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBmake_observer_at_geocenter()\fP 
.PP
\fBmake_observer_on_surface()\fP 
.PP
\fBmake_observer_in_space()\fP 
.PP
\fBmake_solar_system_observer()\fP 
.RE
.PP

.PP
References \fBobserver::near_earth\fP, \fBNOVAS_AIRBORNE_OBSERVER\fP, \fBNOVAS_OBSERVER_AT_GEOCENTER\fP, \fBNOVAS_OBSERVER_IN_EARTH_ORBIT\fP, \fBNOVAS_OBSERVER_ON_EARTH\fP, \fBNOVAS_SOLAR_SYSTEM_OBSERVER\fP, \fBobserver::on_surf\fP, \fBin_space::sc_vel\fP, and \fBobserver::where\fP\&.
.SS "int make_observer_at_geocenter (\fBobserver\fP *restrict obs)"
Populates an 'observer' data structure for a hypothetical observer located at Earth's geocenter\&. The output data structure may be used an the the inputs to NOVAS-C function '\fBplace()\fP'\&.
.PP
\fBParameters\fP
.RS 4
\fIobs\fP Pointer to data structure to populate\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or -1 if the output argument is NULL\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBmake_observer_in_space()\fP 
.PP
\fBmake_observer_on_surface()\fP 
.PP
\fBplace()\fP 
.RE
.PP

.PP
References \fBmake_observer()\fP, and \fBNOVAS_OBSERVER_AT_GEOCENTER\fP\&.
.SS "int make_observer_in_space (const double * sc_pos, const double * sc_vel, \fBobserver\fP * obs)"
Populates an 'observer' data structure, for an observer situated on a near-Earth spacecraft, with the specified geocentric position and velocity vectors\&. Both input vectors are with respect to true equator and equinox of date\&. The output data structure may be used an the the inputs to NOVAS-C function '\fBplace()\fP'\&.
.PP
\fBParameters\fP
.RS 4
\fIsc_pos\fP [km] Geocentric (x, y, z) position vector in km\&. 
.br
\fIsc_vel\fP [km/s] Geocentric (x, y, z) velocity vector in km/s\&. 
.br
\fIobs\fP Pointer to the data structure to populate 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or -1 if the output argument is NULL\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBmake_observer_on_surface()\fP 
.PP
\fBmake_observer_at_geocenter()\fP 
.PP
\fBplace()\fP 
.RE
.PP

.PP
References \fBmake_in_space()\fP, \fBmake_observer()\fP, and \fBNOVAS_OBSERVER_IN_EARTH_ORBIT\fP\&.
.SS "int make_observer_on_surface (double latitude, double longitude, double height, double temperature, double pressure, \fBobserver\fP *restrict obs)"
Populates and '\fBon_surface\fP' data structure with the specified location defining parameters of the observer\&. The output data structure may be used an the the inputs to NOVAS-C function '\fBplace()\fP'\&.
.PP
\fBParameters\fP
.RS 4
\fIlatitude\fP [deg] Geodetic (ITRS) latitude in degrees; north positive\&. 
.br
\fIlongitude\fP [deg] Geodetic (ITRS) longitude in degrees; east positive\&. 
.br
\fIheight\fP [m] Altitude over se level of the observer (meters)\&. 
.br
\fItemperature\fP [C] Temperature (degrees Celsius)\&. 
.br
\fIpressure\fP [mbar] Atmospheric pressure (millibars)\&. 
.br
\fIobs\fP Pointer to the data structure to populate\&.
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or -1 if the output argument is NULL\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBmake_observer_in_space()\fP 
.PP
\fBmake_observer_at_geocenter()\fP 
.PP
\fBplace()\fP 
.RE
.PP

.PP
References \fBmake_observer()\fP, \fBmake_on_surface()\fP, and \fBNOVAS_OBSERVER_ON_EARTH\fP\&.
.SS "int make_on_surface (double latitude, double longitude, double height, double temperature, double pressure, \fBon_surface\fP *restrict loc)"
Populates an '\fBon_surface\fP' data structure, for an observer on the surface of the Earth, with the given parameters\&.
.PP
Note, that because this is an original NOVAS C routine, it does not have an argument to set a humidity value (e\&.g\&. for radio refraction)\&. As such, the humidity value remains undefined after this call\&. To set the humidity, set the output structure's field after calling this funcion\&. Its unit is [%], and so the range is 0\&.0--100\&.0\&.
.PP
NOTES 
.PD 0
.IP "1." 4
This implementation breaks strict v1\&.0 ABI compatibility since it writes to (initializes) a field (\fChumidity\fP) that was not yet part of the \fC\fBon_surface\fP\fP structure in v1\&.0\&. As such, linking SuperNOVAS v1\&.1 or later with application code compiled for SuperNOVAS v1\&.0 can result in memory corruption or segmentation fault when this function is called\&. To be safe, make sure your application has been (re)compiled against SuperNOVAS v1\&.1 or later\&. 
.PP
.PP
\fBParameters\fP
.RS 4
\fIlatitude\fP [deg] Geodetic (ITRS) latitude in degrees; north positive\&. 
.br
\fIlongitude\fP [deg] Geodetic (ITRS) longitude in degrees; east positive\&. 
.br
\fIheight\fP [m] Altitude over se level of the observer (meters)\&. 
.br
\fItemperature\fP [C] Temperature (degrees Celsius)\&. 
.br
\fIpressure\fP [mbar] Atmospheric pressure (millibars)\&. 
.br
\fIloc\fP Pointer to Earth location data structure to populate\&.
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or -1 if the output argument is NULL\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBmake_observer_on_surface()\fP 
.PP
\fBmake_in_space()\fP 
.PP
\fBON_SURFACE_INIT\fP 
.PP
\fBON_SURFACE_LOC\fP 
.RE
.PP

.SS "int make_solar_system_observer (const double * sc_pos, const double * sc_vel, \fBobserver\fP * obs)"
Populates an 'observer' data structure, for an observer situated on a near-Earth spacecraft, with the specified geocentric position and velocity vectors\&. Solar-system observers are similar to observers in Earth-orbit but their momentary position and velocity is defined relative to the Solar System Barycenter, instead of the geocenter\&.
.PP
\fBParameters\fP
.RS 4
\fIsc_pos\fP [AU] Solar-system barycentric (x, y, z) position vector in ICRS\&. 
.br
\fIsc_vel\fP [AU/day] Solar-system barycentric (x, y, z) velocity vector in ICRS\&. 
.br
\fIobs\fP Pointer to the data structure to populate 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or -1 if the output argument is NULL\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBmake_observer_in_space()\fP 
.PP
\fBmake_observer_on_surface()\fP 
.PP
\fBmake_observer_at_geocenter()\fP 
.PP
\fBmake_airborne_observer()\fP 
.PP
novas_calc_geometric_position() 
.PP
\fBplace()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBmake_in_space()\fP, \fBmake_observer()\fP, and \fBNOVAS_SOLAR_SYSTEM_OBSERVER\fP\&.
.SS "int novas_e2h_offset (double dra, double ddec, double pa, double *restrict daz, double *restrict del)"
Converts coordinate offsets, from the local equatorial system to local horizontal offsets\&. Converting between local flat projections and spherical coordinates usually requires a WCS projection\&.
.PP
REFERENCES: 
.PD 0
.IP "1." 4
Calabretta, M\&.R\&., & Greisen, E\&.W\&., (2002), Astronomy & Astrophysics, 395, 1077-1122\&. 
.PP
.PP
\fBParameters\fP
.RS 4
\fIdra\fP [arcsec] Projected ffset position in the apparent true-of-date R\&.A\&. direction\&. E\&.g\&. The projected offset between two RA coordinates at a same reference declination, is RA = (RA2 - RA1) * cos(Dec\*<0\*> ) 
.br
\fIddec\fP [arcsec] Projected offset position in the apparent true-of-date declination direction\&. 
.br
\fIpa\fP [deg] Parallactic Angle 
.br
\fIdaz\fP [arcsec] Output offset position in the local azimuth direction\&. It can be a pointer to one of the input coordinates, or NULL if not required\&. 
.br
\fIdel\fP [arcsec] Output offset position in the local elevation direction\&. It can be a pointer to one of the input coordinates, or NULL if not required\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_h2e_offset()\fP 
.PP
\fBnovas_epa()\fP 
.RE
.PP

.PP
References \fBnovas_h2e_offset()\fP\&.
.SS "double novas_epa (double ha, double dec, double lat)"
Returns the equatorial Parallactic Angle (PA) calculated for an R\&.A\&./Dec location of the sky at a given sidereal time\&. The PA is the angle between the local horizontal coordinate directions and the local true-of-date equatorial coordinate directions, at the given location and time\&. The polar wobble is not included in the calculation\&.
.PP
The Parallactic Angle is sometimes referrred to as the Vertical Position Angle (VPA)\&. Both define the same quantity\&.
.PP
\fBParameters\fP
.RS 4
\fIha\fP [h] Hour angle (LST - RA) i\&.e\&., the difference between the Local (apparent) Sidereal Time and the apparent (true-of-date) Right Ascension of observed source\&. 
.br
\fIdec\fP [deg] Apparent (true-of-date) declination of observed source 
.br
\fIlat\fP [deg] Geodetic latitude of observer 
.RE
.PP
\fBReturns\fP
.RS 4
[deg] Parallactic Angle (PA)\&. I\&.e\&., the clockwise position angle of the elevation direction w\&.r\&.t\&. the declination axis in the equatorial system\&. Same as the clockwise position angle of the declination direction w\&.r\&.t\&. the elevation axis, in the horizontal system\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_hpa()\fP 
.PP
novas_lst() 
.PP
\fBnovas_e2h_offset()\fP 
.RE
.PP

.SS "int novas_h2e_offset (double daz, double del, double pa, double *restrict dra, double *restrict ddec)"
Converts coordinate offsets, from the local horizontal system to local equatorial offsets\&. Converting between local flat projections and spherical coordinates usually requires a WCS projection\&.
.PP
REFERENCES: 
.PD 0
.IP "1." 4
Calabretta, M\&.R\&., & Greisen, E\&.W\&., (2002), Astronomy & Astrophysics, 395, 1077-1122\&. 
.PP
.PP
\fBParameters\fP
.RS 4
\fIdaz\fP [arcsec] Projected offset position in the azimuth direction\&. The projected offset between two azimuth positions at the same reference elevation is Az = (Az2 - Az1) * cos(El\*<0\*> )\&. 
.br
\fIdel\fP [arcsec] projected offset position in the elevation direction 
.br
\fIpa\fP [deg] Parallactic Angle 
.br
\fIdra\fP [arcsec] Output offset position in the local true-of-date R\&.A\&. direction\&. It can be a pointer to one of the input coordinates, or NULL if not required\&. 
.br
\fIddec\fP [arcsec] Output offset position in the local true-of-date declination direction\&. It can be a pointer to one of the input coordinates, or NULL if not required\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_e2h_offset()\fP 
.PP
\fBnovas_hpa()\fP 
.RE
.PP

.SS "double novas_hpa (double az, double el, double lat)"
Returns the horizontal Parallactic Angle (PA) calculated for a gorizontal Az/El location of the sky\&. The PA is the angle between the local horizontal coordinate directions and the local true-of-date equatorial coordinate directions at the given location\&. The polar wobble is not included in the calculation\&.
.PP
The Parallactic Angle is sometimes referrred to as the Vertical Position Angle (VPA)\&. Both define the same quantity\&.
.PP
\fBParameters\fP
.RS 4
\fIaz\fP [deg] Azimuth angle 
.br
\fIel\fP [deg] Elevation angle 
.br
\fIlat\fP [deg] Geodetic latitude of observer 
.RE
.PP
\fBReturns\fP
.RS 4
[deg] Parallactic Angle (PA)\&. I\&.e\&., the clockwise position angle of the declination direction w\&.r\&.t\&. the elevation axis in the horizontal system\&. Same as the the clockwise position angle of the elevation direction w\&.r\&.t\&. the declination axis in the equatorial system\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_epa()\fP 
.PP
\fBnovas_h2e_offset()\fP 
.RE
.PP

.SS "int novas_los_to_xyz (const double * los, double lon, double lat, double * xyz)"
Converts a 3D line-of-sight vector (,  r) to a rectangular equatorial (x, y, z) vector\&.
.PP
\fBParameters\fP
.RS 4
\fIlos\fP [arb\&.u\&.] Line-of-sight 3-vector (,  r)\&. 
.br
\fIlon\fP [deg] Line-of-sight longitude\&. 
.br
\fIlat\fP [deg] Line-of-sight latitude\&. 
.br
\fIxyz\fP [arb\&.u\&.] Output rectangular equatorial 3-vector (x, y, z), in the same units as the input\&. It may be the same vector as the input\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else -1 if either vector argument is NULL (errno will be set to EINVAL)\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_xyz_to_los()\fP 
.PP
\fBnovas_uvw_to_xyz()\fP 
.RE
.PP

.SS "int novas_uvw_to_xyz (const double * uvw, double ha, double dec, double * xyz)"
Converts equatorial u,v,w projected (absolute or relative) coordinates to rectangular telescope x,y,z coordinates (in ITRS) to for a specified line of sight\&.
.PP
u,v,w are Cartesian coordinates (u,v) along the local equatorial R\&.A\&. and declination directions as seen from a direction on the sky (w)\&. As such, they are effectively ITRS-based line-of-sight (LOS) coordinates\&.
.PP
x,y,z are Cartesian coordinates w\&.r\&.t the Greenwich meridian in the ITRS frame\&. The directions are x: long=0, lat=0; y: long=90, lat=0; z: lat=90\&.
.PP
\fBParameters\fP
.RS 4
\fIxyz\fP [arb\&.u\&.] Absolute or relative u,v,w coordinates (double[3])\&. 
.br
\fIha\fP [h] Hourangle (LST - RA) i\&.e\&., the difference between the Local (apparent) Sidereal Time and the apparent (true-of-date) Right Ascension of observed source\&. 
.br
\fIdec\fP [deg] Apparent (true-of-date) declination of source 
.br
\fIuvw\fP [arb\&.u\&.] Converted x,y,z coordinates (double[3]) in the same unit as uvw\&. It may be the same vector as the input\&.
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else -1 if either vector argument is NULL (errno will be set to EINVAL)
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_xyz_to_uvw()\fP 
.RE
.PP

.PP
References \fBnovas_los_to_xyz()\fP\&.
.SS "int novas_xyz_to_los (const double * xyz, double lon, double lat, double * los)"
Converts a 3D rectangular equatorial (x, y, z) vector to a polar (,  r) vector along a line-of-sight\&.
.PP
\fBParameters\fP
.RS 4
\fIxyz\fP [arb\&.u\&.] Rectangular equatorial 3-vector (x, y, z)\&. 
.br
\fIlon\fP [deg] Line-of-sight longitude\&. 
.br
\fIlat\fP [deg] Line-of-sight latitude\&. 
.br
\fIlos\fP [arb\&.u\&.] Output line-of-sight 3-vector (,  r), in the same units as the input\&. It may be the same vector as the input\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else -1 if either vector argument is NULL (errno will be set to EINVAL)\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_los_to_xyz()\fP 
.PP
\fBnovas_xyz_to_uvw()\fP 
.RE
.PP

.SS "int novas_xyz_to_uvw (const double * xyz, double ha, double dec, double * uvw)"
Converts rectangular telescope x,y,z (absolute or relative) coordinates (in ITRS) to equatorial u,v,w projected coordinates for a specified line of sight\&.
.PP
x,y,z are Cartesian coordinates w\&.r\&.t the Greenwich meridian, in the ITRS frame\&. The directions are x: long=0, lat=0; y: long=90, lat=0; z: lat=90\&.
.PP
u,v,w are Cartesian coordinates (u,v) along the local equatorial R\&.A\&. and declination directions as seen from a direction on the sky (w)\&. As such, they are effectively ITRS-based line-of-sight (LOS) coordinates\&.
.PP
\fBParameters\fP
.RS 4
\fIxyz\fP [arb\&.u\&.] Absolute or relative x,y,z coordinates (double[3])\&. 
.br
\fIha\fP [h] Hourangle (LST - RA) i\&.e\&., the difference between the Local (apparent) Sidereal Time and the apparent (true-of-date) Right Ascension of observed source\&. 
.br
\fIdec\fP [deg] Apparent (true-of-date) declination of source 
.br
\fIuvw\fP [arb\&.u\&.] Converted u,v,w coordinates (double[3]) in same units as xyz\&. It may be the same vector as the input\&.
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else -1 if either vector argument is NULL (errno will be set to EINVAL)
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_uvw_to_xyz()\fP 
.RE
.PP

.PP
References \fBnovas_xyz_to_los()\fP\&.
.SS "int obs_planets (double jd_tdb, enum \fBnovas_accuracy\fP accuracy, const double *restrict pos_obs, int pl_mask, \fBnovas_planet_bundle\fP *restrict planets)"
Calculates the positions and velocities for the Solar-system bodies, e\&.g\&. for use for graviational deflection calculations\&. The planet positions are calculated relative to the observer location, while velocities are w\&.r\&.t\&. the SSB\&. Both positions and velocities are antedated for light travel time, so they accurately reflect the apparent position (and barycentric motion) of the bodies from the observer's perspective\&.
.PP
\fBParameters\fP
.RS 4
\fIjd_tdb\fP [day] Barycentric Dynamical Time (TDB) based Julian date 
.br
\fIaccuracy\fP NOVAS_FULL_ACCURACY (0) or NOVAS_REDUCED_ACCURACY (1)\&. In full accuracy mode, it will calculate the deflection due to the Sun, Jupiter, Saturn and Earth\&. In reduced accuracy mode, only the deflection due to the Sun is calculated\&. 
.br
\fIpos_obs\fP [AU] Position 3-vector of observer (or the geocenter), with respect to origin at solar system barycenter, referred to ICRS axes, components in AU\&. 
.br
\fIpl_mask\fP Bitwise \fC(1 << planet-number)\fP mask indicating which planets to request data for\&. See enum novas_planet for the enumeration of planet numbers\&. 
.br
\fIplanets\fP Pointer to apparent planet data to populate\&. have positions and velocities calculated successfully\&. See enum novas_planet for the enumeration of planet numbers\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, -1 if any of the pointer arguments is NULL or if the output vector is the same as pos_obs, or the error from \fBephemeris()\fP\&.
.RE
.PP
\fBSee also\fP
.RS 4
enum \fBnovas_planet\fP 
.PP
\fBgrav_planets()\fP 
.PP
\fBgrav_undo_planets()\fP 
.PP
\fBset_planet_provider()\fP 
.PP
\fBset_planet_provider_hp()\fP
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBlight_time2()\fP, \fBmake_planet()\fP, \fBnovas_debug()\fP, \fBNOVAS_DEBUG_EXTRA\fP, \fBNOVAS_DEBUG_OFF\fP, \fBnovas_get_debug_mode()\fP, \fBNOVAS_PLANETS\fP, and \fBNOVAS_SUN\fP\&.
.SS "int obs_posvel (double jd_tdb, double ut1_to_tt, enum \fBnovas_accuracy\fP accuracy, const \fBobserver\fP *restrict obs, const double *restrict geo_pos, const double *restrict geo_vel, double *restrict pos, double *restrict vel)"
Calculates the ICRS position and velocity of the observer relative to the Solar System Barycenter (SSB)\&.
.PP
\fBParameters\fP
.RS 4
\fIjd_tdb\fP [day] Barycentric Dynamical Time (TDB) based Julian date\&. 
.br
\fIut1_to_tt\fP [s] TT - UT1 time difference\&. Used only when 'location->where' is NOVAS_OBSERVER_ON_EARTH (1) or NOVAS_OBSERVER_IN_EARTH_ORBIT (2)\&. 
.br
\fIaccuracy\fP NOVAS_FULL_ACCURACY (0) or NOVAS_REDUCED_ACCURACY (1) 
.br
\fIobs\fP The observer location, relative to which the output positions and velocities are to be calculated 
.br
\fIgeo_pos\fP [AU] ICRS position vector of the geocenter w\&.r\&.t\&. the Solar System Barycenter (SSB)\&. If either geo_pos or geo_vel is NULL, it will be calculated when needed\&. 
.br
\fIgeo_vel\fP [AU/day] ICRS velocity vector of the geocenter w\&.r\&.t\&. the Solar System Barycenter (SSB)\&. If either geo_pos or geo_vel is NULL, it will be calculated when needed\&. 
.br
\fIpos\fP [AU] Position 3-vector of the observer w\&.r\&.t\&. the Solar System Barycenter (SSB)\&. It may be NULL if not required\&. 
.br
\fIvel\fP [AU/day] Velocity 3-vector of the observer w\&.r\&.t\&. the Solar System Barycenter (SSB)\&. It must be distinct from the pos output vector, and may be NULL if not required\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or the error from \fBgeo_posvel()\fP, or else -1 (with errno indicating the type of error)\&.
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP
\fBSince\fP
.RS 4
1\&.1
.RE
.PP
\fBSee also\fP
.RS 4
\fBplace()\fP 
.RE
.PP

.PP
References \fBephemeris()\fP, \fBgeo_posvel()\fP, \fBNOVAS_AIRBORNE_OBSERVER\fP, \fBNOVAS_BARYCENTER\fP, \fBNOVAS_EARTH_INIT\fP, \fBNOVAS_OBSERVER_IN_EARTH_ORBIT\fP, \fBNOVAS_OBSERVER_ON_EARTH\fP, \fBNOVAS_OBSERVER_PLACES\fP, and \fBNOVAS_SOLAR_SYSTEM_OBSERVER\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for SuperNOVAS from the source code\&.
