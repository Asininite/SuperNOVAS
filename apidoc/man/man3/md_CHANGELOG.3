.TH "md_CHANGELOG" 3 "Version v1.2" "SuperNOVAS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_CHANGELOG \- Changelog 
.PP
 All notable changes to the \fCSuperNOVAS\fP library will be documented in this file\&.
.PP
The format is based on \fCKeep a Changelog\fP, and this project adheres to \fCSemantic Versioning\fP\&.
.SH "[1\&.2\&.0-rc1] - 2024-11-11"
.PP
Release candidate for the next feature release, expected around 1 February 2025\&.
.SS "Added"
.IP "\(bu" 2
#57: New \fCnovas_make_redshifted_object()\fP to simplify the creation of distant catalog sources that are characterized with a redshift measure rather than a radial velocity value\&.
.IP "\(bu" 2
#57: New generic redshift-handling functions \fC\fBnovas_v2z()\fP\fP, \fC\fBnovas_z2v()\fP\fP,
.IP "\(bu" 2
#58: New functions to calculate and apply additional gravitational redshift corrections for light that originates near massive gravitating bodies (other than major planets, or Sun or Moon), or for observers located near massive gravitating bodies (other than the Sun and Earth)\&. The added functions are \fC\fBgrav_redshift()\fP\fP, \fCredhift_vrad()\fP, \fC\fBunredshift_vrad()\fP\fP, \fC\fBnovas_z_add()\fP\fP, and \fC\fBnovas_z_inv()\fP\fP\&.
.IP "\(bu" 2
#83: CALCEPH integration: \fC\fBnovas_use_calceph()\fP\fP and/or \fC\fBnovas_use_calceph_planets()\fP\fP to specify and use ephemeris data via CALCEPH for Solar-system sources in general, and for major planets specifically; and \fC\fBnovas_calceph_use_ids()\fP\fP to specify whether \fC\fBobject\&.number\fP\fP in \fCNOVAS_EPHEM_OBJECT\fP type objects is a NAIF ID (default) or else a CALCEPH ID number of the Solar-system body\&. These functions are provided by the \fClibsolsys-calceph\&.so[\&.1]\fP and/or \fC\&.a\fP plugin libraries, which are built contingent on the \fCCALCEPH_SUPPORT\fP variable being set to 1 prior to the build\&. The build of the plugin module requires an accessible installation of the CALCEPH development files (C headers and unversioned static or shared libraries depending on the needs of the build)\&.
.IP "\(bu" 2
#86: NAIF CSPICE integration: \fC\fBnovas_use_cspice()\fP\fP, \fC\fBnovas_use_cspice_planets()\fP\fP, \fC\fBnovas_use_cspice_ephem()\fP\fP to use the NAIF CSPICE library for all Solar-system sources, major planets only, or for other bodies only\&. \fCNOVAS_EPHEM_OBJECTS\fP should use NAIF IDs with CSPICE (or else -1 for name-based lookup)\&. Also provides \fC\fBcspice_add_kernel()\fP\fP and \fC\fBcspice_remove_kernel()\fP\fP functions for convenience to manage the set of active kernels (#89)\&. These functions are provided by the \fClibsolsys-cspice\&.so[\&.1]\fP and/or \fC\&.a\fP plugin libraries, which are built contingent on the \fCCSPICE_SUPPORT\fP variable being set to 1 prior to the build\&. The build of the plugin module requires an accessible installation of the CSPICE development files (C headers and unversioned static or shared libraries depending on the needs of the build)\&.
.IP "\(bu" 2
#87: Added \fC\fBnovas_planet_for_name()\fP\fP function to return the NOVAS planet ID for a given (case insensitive) name\&.
.IP "\(bu" 2
NOVAS-NAIF conversions for major planets (and Sun, Moon, SSB): \fC\fBnovas_to_naif_planet()\fP\fP (planet centers), \fC\fBnovas_to_dexxx_planet()\fP\fP (mixed planet center/barycenter for DExxx ephemeris files), and the inverse \fC\fBnaif_to_novas_planet()\fP\fP\&.
.IP "\(bu" 2
Added \fC\fBget_planet_provider()\fP\fP and \fC\fBget_planet_provider_hp()\fP\fP functions for convenience to return the \fC\fBsolarsystem()\fP\fP / \fC\fBsolarsystem_hp()\fP\fP type custom planet ephemeris provider functions currently configured, so they may be used directly, outside of \fC\fBephemeris()\fP\fP calls\&.
.PP
.SH "[1\&.1\&.1] - 2024-10-28"
.PP
Bug fix release\&. Nothing too scary, mainly just a collection of smaller fixes and improvements\&.
.SS "Fixed"
.IP "\(bu" 2
#55: Relativistic corrections to radial velocity were still not applied correctly\&. The revised calculation now uses the actual relativistic velocity differential between the source and observer to apply the appropriate time dilation factor, and applies gravitational corrections for Sun and Earth consistently at source and observer alike\&.
.IP "\(bu" 2
#64: \fCNOVAS_TAI_TO_TT\fP definition had wrong decimal in last place, thus was 3 ms off from what it should have been\&. (thanks to kiranshila)
.IP "\(bu" 2
#68: \fCreadeph_dummy()\fP dummy implementation in \fCreadeph0\&.c\fP called non existing error handler function\&.
.PP
.SS "Changed"
.IP "\(bu" 2
#59: For observing major planets (and Sun and Moon) \fC\fBrad_vel()\fP\fP, \fC\fBrad_vel2()\fP\fP, \fC\fBplace()\fP\fP, and \fC\fBnovas_sky_pos()\fP\fP will include gravitational corrections to radial velocity for light originating at the surface, and observed near Earth or else at a large distance away\&. These corrections, along with those for the Solar potential at the source, may be skipped for \fC\fBrad_vel()\fP\fP / \fC\fBrad_vel2()\fP\fP by setting \fCd_src_sun\fP negative\&.
.IP "\(bu" 2
#55: Use relativistic formulae to add/difference velocities (i\&.e\&. change velocity reference frame)\&.
.IP "\(bu" 2
#60: Moved SuperNOVAS-only functions to a separate \fC\fBsuper\&.c\fP\fP module to alleviate the bloating of \fC\fBnovas\&.c\fP\fP, which can still be used as a self-contained, standalone, NOVAS C replacement for legacy applications if need be\&.
.IP "\(bu" 2
#62: Improve debug mode error tracing when NAN values are returned, so the trace indicates NAN rather than a bogus integer return value before\&.
.IP "\(bu" 2
#66: Various tweaks for C/C++ best practices (by kiranshila)
.IP "\(bu" 2
#67: Use accuracy argument in \fC\fBtod_to_cirs()\fP\fP\&. (thanks to kiranshila)
.IP "\(bu" 2
#68: Various improvements to debug error tracing\&.
.IP "\(bu" 2
#73: Initializer macros (primarily for internal use), forced 'use' of unused variables after declarations, and no order-only-dependencies in Makefiles -- in order to cure warnings and to conform with older compilers and make\&.
.IP "\(bu" 2
Slight tweaks to \fCMakefile\fP, and \fC\&.mk\fP snippets, with added \fCmake\fP configurability\&.
.PP
.SH "[1\&.1\&.0] - 2024-08-04"
.PP
Feature release\&. Introducing a more efficient and elegant approach to position and velocity calculations using observer frames; versatile handling of astronomical timescales; and support for further observer locations, coordinate reference systems, and atmospheric refraction models\&. The release also fixes a number of bugs, of varying severity, which affected prior SuperNOVAS releases\&.
.SS "Fixed"
.IP "\(bu" 2
#29: Fix portability to non-Intel platforms\&. Previously, SuperNOVAS used \fCchar\fP for storing small integer coefficients, assuming \fCchar\fP was signed\&. However, on some platforms like ARM and PowerPC \fCchar\fP is unsigned, which broke calculations badly\&. As of now, we use the explicit platform independent signed \fCint8_t\fP storage type for these coefficients\&.
.IP "\(bu" 2
#38: \fC\fBgcrs_to_j2000()\fP\fP transformed in the wrong direction in v1\&.0\&.
.IP "\(bu" 2
#39: \fC\fBtod_to_itrs()\fP\fP used wrong Earth rotation measure (\fCNOVAS_ERA\fP instead of \fCNOVAS_GST\fP) in v1\&.0\&.
.IP "\(bu" 2
#45: \fC\fBcel2ter()\fP\fP invalid output in v1\&.0 with CIRS input coordinates (\fCerot\fP = \fCEROT_ERA\fP and \fCclass\fP = \fCNOVAS_DYNAMICAL_CLASS\fP) if output vector was distinct from input vector\&. Affects \fC\fBcirs_to_itrs()\fP\fP also\&.
.IP "\(bu" 2
#36: \fC\fBtt2tdb()\fP\fP Had a wrong scaling in sinusoidal period in v1\&.0, resulting in an error of up to +/- 1\&.7 ms\&.
.IP "\(bu" 2
#37: \fC\fBgcrs_to_cirs()\fP\fP did not handle well if input and output vectors were the same in v1\&.0\&.
.IP "\(bu" 2
#28: Division by zero bug in \fC\fBd_light()\fP\fP (since NOVAS C 3\&.1) if the first position argument is the ephemeris reference position (e\&.g\&. the Sun for \fC\fBsolsys3\&.c\fP\fP)\&. The bug affects for example \fC\fBgrav_def()\fP\fP, where it effectively results in the gravitational deflection due to the Sun being skipped\&. See Issue #28\&.
.IP "\(bu" 2
#41: \fC\fBgrav_def()\fP\fP gravitating body position antedated somewhat incorrectly (in v1\&.0) when observed source is a Solar-system object between the observer and the gravitating body\&. The resulting positional error is typically small at below 10 uas\&.
.IP "\(bu" 2
#50: The NOVAS C 3\&.1 implementation of \fC\fBrad_vel()\fP\fP applied relativistic corrections for a moving observer conditional on applying relativistic gravitational corrections (for Sun and/or Earth potential) for the observer\&. However, it seems more reasonable that the corrections for a moving observer should be applied always and independently of the (optional) gravitational corrections\&.
.IP "\(bu" 2
#34: \fC\fBplace()\fP\fP radial velocities were not quite correct in prior SuperNOVAS releases\&. The radial velocity calculation now precedes aberration, since the radial velocity that is observed is in the geometric direction towards the source (unaffected by aberration)\&. As for gravitational deflection, the geometric direction is the correct direction in which light was emitted from the source for sidereal objects\&. For Solar system sources we now reverse trace the deflected light to calculate the direction in which it was emitted from the source\&. As such, the radial velocities calculated should now be precise under all conditions\&. The typical errors of the old calculations were up to tens of m/s because of aberration, and a few m/s due to the wrong gravitational deflection calculation\&.
.IP "\(bu" 2
#24: Bungled definition of \fCSUPERNOVAS_VERSION_STRING\fP in \fC\fBnovas\&.h\fP\fP in v1\&.0\&.
.IP "\(bu" 2
Bungled definition of \fCNOVAS_OBSERVER_PLACES\fP in \fC\fBnovas\&.h\fP\fP in v1\&.0\&.
.PP
.SS "Added"
.IP "\(bu" 2
#33: New observing-frame based approach for calculations (\fC\fBframes\&.c\fP\fP)\&. A \fC\fBnovas_frame\fP\fP object uniquely defines both the place and time of observation, with a set of pre-calculated transformations and constants\&. Once the frame is defined it can be used very efficiently to calculate positions for multiple celestial objects with minimum additional computational cost\&. The frames API is also more elegant and more versatile than the low-level NOVAS C approach for performing the same kind of calculations\&. And, frames are inherently thread-safe since post-creation their internal state is never modified during the calculations\&. The following new functions were added: \fC\fBnovas_make_frame()\fP\fP, \fC\fBnovas_change_observer()\fP\fP, \fC\fBnovas_geom_posvel()\fP\fP, \fC\fBnovas_geom_to_app()\fP\fP, \fC\fBnovas_sky_pos()\fP\fP, \fC\fBnovas_app_to_hor()\fP\fP, \fC\fBnovas_app_to_geom()\fP\fP, \fC\fBnovas_hor_to_app()\fP\fP\&.
.IP "\(bu" 2
#33: New coordinate system transformations via the \fC\fBnovas_transform\fP\fP structure\&. You may use these transforms to express position / velocity vectors, calculated for a given observer and time, in the coordinate reference system of choice\&.The following new functions were added: \fC\fBnovas_make_transform()\fP\fP, \fC\fBnovas_invert_transform()\fP\fP, \fC\fBnovas_transform_vector()\fP\fP, and \fC\fBnovas_transform_sky_pos()\fP\fP\&.
.IP "\(bu" 2
#33: New \fC\fBnovas_timespec\fP\fP structure for the self-contained definition of precise astronomical time (\fC\fBtimescale\&.c\fP\fP)\&. You can set the time via \fC\fBnovas_set_time()\fP\fP or \fC\fBnovas_set_split_time()\fP\fP to a JD date in the timescale of choice (UTC, UT1, GPS, TAI, TT, TCG, TDB, or TCB), or to a UNIX time with \fC\fBnovas_set_unix_time()\fP\fP\&. Once set, you can obtain an expression of that time in any timescale of choice via \fC\fBnovas_get_time()\fP\fP, \fC\fBnovas_get_split_time()\fP\fP or \fC\fBnovas_get_unix_time()\fP\fP\&. And, you can create a new time specification by incrementing an existing one, using \fCnovas_increment_time()\fP, or measure time differences via \fC\fBnovas_diff_time()\fP\fP, \fC\fBnovas_diff_tcg()\fP\fP, or \fC\fBnovas_diff_tcb()\fP\fP\&.
.IP "\(bu" 2
Added \fC\fBnovas_planet_bundle\fP\fP structure to handle planet positions and velocities more elegantly (e\&.g\&. for gravitational deflection calculations)\&.
.IP "\(bu" 2
#32: Added \fC\fBgrav_undef()\fP\fP to undo gravitational bending of the observed light to obtain geometric positions from observed ones\&.
.IP "\(bu" 2
Added \fC\fBobs_posvel()\fP\fP to calculate the observer position and velocity relative to the Solar System Barycenter (SSB)\&.
.IP "\(bu" 2
Added \fC\fBobs_planets()\fP\fP to calculate apparent planet positions (relative to observer) and velocities (w\&.r\&.t\&. SSB)\&.
.IP "\(bu" 2
Added new observer locations \fCNOVAS_AIRBORNE_OBSERVER\fP for an observer moving relative to the surface of Earth e\&.g\&. in an aircraft or balloon based telescope platform, and \fCNOVAS_SOLAR_SYSTEM_OBSERVER\fP for spacecraft orbiting the Sun\&. Both of these use the \fC\fBobserver\&.near_earth\fP\fP strcture to define (positions and) velocities as appropriate\&. Hence the \fC'near_earth\fP name is a bit misleading, but remains for back compatibility\&.
.IP "\(bu" 2
Added coordinate reference systems \fCNOVAS_MOD\fP (Mean of Date) which includes precession by not nutation and \fCNOVAS_J2000\fP for the J2000 dynamical reference system\&.
.IP "\(bu" 2
New observer locations \fCNOVAS_AIRBORNE_OBSERVER\fP and \fCNOVAS_SOLAR_SYSTEM_OBSERVER\fP, and corresponding \fC\fBmake_airborne_observer()\fP\fP and \fC\fBmake_solar_system_observer()\fP\fP functions\&. Airborne observers have an Earth-fixed momentary location, defined by longitude, latitude, and altitude, the same way as for a stationary observer on Earth, but are moving relative to the surface, such as in an aircraft or balloon based observatory\&. Solar-system observers are similar to observers in Earth-orbit but their momentary position and velocity is defined relative to the Solar System Barycenter (SSB), instead of the geocenter\&.
.IP "\(bu" 2
Added humidity field to \fC\fBon_surface\fP\fP structure, e\&.g\&. for refraction calculations at radio wavelengths\&. The \fC\fBmake_on_surface()\fP\fP function will set humidity to 0\&.0, but the user can set the field appropriately afterwards\&.
.IP "\(bu" 2
New set of built-in refraction models to use with the frame-based \fC\fBnovas_app_to_hor()\fP\fP / \fC\fBnovas_hor_to_app()\fP\fP functions\&. The models \fC\fBnovas_standard_refraction()\fP\fP and \fC\fBnovas_optical_refraction()\fP\fP implement the same refraction model as \fC\fBrefract()\fP\fP in NOVAS C 3\&.1, with \fCNOVAS_STANDARD_ATMOSPHERE\fP and \fCNOVAS_WEATHER_AT_LOCATION\fP respectively, including the reversed direction provided by \fC\fBrefract_astro()\fP\fP\&. The user may supply their own custom refraction also, and may make use of the generic reversal function \fC\fBnovas_inv_refract()\fP\fP to calculate refraction in the reverse direction (observer vs astrometric elevations) as needed\&.
.IP "\(bu" 2
Added radio refraction model \fC\fBnovas_radio_refraction()\fP\fP based on the formulae by Berman & Rockwell 1976\&.
.IP "\(bu" 2
Added \fC\fBcirs_to_tod()\fP\fP and \fC\fBtod_to_cirs()\fP\fP functions for efficient tranformation between True of Date (TOD) and Celestial Intermediate Reference System (CIRS), and vice versa\&.
.IP "\(bu" 2
Added \fC\fBmake_cat_object()\fP\fP function to create a NOVAS celestial \fCobject\fP structure from existing \fC\fBcat_entry\fP\fP data\&.
.IP "\(bu" 2
Added \fC\fBrad_vel2()\fP\fP to calculate radial velocities precisely in the presense of gravitational deflection i\&.e\&., when the direction in which light was emitted is different from the direction it is detected by the observer\&. This new function is now used by both \fC\fBplace()\fP\fP and \fC\fBnovas_sky_pos()\fP\fP\&.
.IP "\(bu" 2
\fCmake help\fP to provide a brief list and explanation of the available build targets\&. (Thanks to \fC@teuben\fP for suggesting this\&.)
.IP "\(bu" 2
Added GitHub CI regression testing for non-x86 platforms: \fCarmv7\fP, \fCaarch64\fP, \fCriscv64\fP, \fCppc64le\fP\&. Thus, we should avoid misphaps, like the platform specific bug Issue #29, in the future\&.
.PP
.SS "Changed"
.IP "\(bu" 2
#42: \fC\fBcio_array()\fP\fP can now parse the original ASCII CIO locator data file (\fCdata/CIO_RA\&.TXT\fP) efficiently also, thus no longer requiring a platform-specific binary translation via the \fCcio_file\fP tool\&.
.IP "\(bu" 2
#51: The NOVAS C implementation of \fC\fBrad_vel()\fP\fP has ignored this redshifting when the Sun was being observed\&. From now on, we shall gravitationally reference radial velocities when observing the Sun to its photosphere\&.
.IP "\(bu" 2
\fCcio_file\fP tool parses interval from header rather than the less precise differencing of the first two record timestamps\&. This leads to \fC\fBcio_array()\fP\fP being more accurately centered on matching date entries, e\&.g\&. J2000\&.
.IP "\(bu" 2
\fC\fBgrav_def()\fP\fP estimation of light time to where light passes nearest to gravitating body is improved by starting with the body position already antedated for light-time for the gravitating mass\&. The change typically improves the grativational deflection calculations at the few uas level\&.
.IP "\(bu" 2
\fC\fBgrav_def()\fP\fP is simplified\&. It no longer uses the location type argument\&. Instead it will skip deflections due to any body, if the observer is within ~1500 km of its center\&.
.IP "\(bu" 2
\fC\fBplace()\fP\fP now returns an error 3 if and only if the observer is at (or very close, to within ~1\&.5m) of the observed Solar-system object\&.
.IP "\(bu" 2
Improved precision of some calculations, like \fC\fBera()\fP\fP, \fC\fBfund_args()\fP\fP, and \fC\fBplanet_lon()\fP\fP by being more careful about the order in which terms are accumulated and combined, resulting in a small improvement on the few uas (micro-arcsecond) level\&.
.IP "\(bu" 2
\fC\fBvector2radec()\fP\fP: \fCra\fP or \fCdec\fP arguments may now be NULL if not required\&.
.IP "\(bu" 2
\fC\fBtt2tdb()\fP\fP Now uses the same, slightly more precise series as the original NOVAS C \fC\fBtdb2tt()\fP\fP\&.
.IP "\(bu" 2
\fC\fBrad_vel()\fP\fP You can use negative values for the distances to skip particular gravitational corrections to the radial velocity measure\&. The value 0\&.0 also continues to have the same effect as before, except if the observed source is the Sun\&. Then \fCd_src_sun\fP being 0\&.0 takes on a different meaning than before: rather than skipping gravitational redshift corrections for the Solar potential (as before) we will apply gravitational corrections for light originating at the Sun's photosphere\&.
.IP "\(bu" 2
\fCPSI_COR\fP and \fCEPS_COR\fP made globally visible again, thus improving NOVAS C 3\&.1 compatibility\&.
.IP "\(bu" 2
Convergent inverse calculations now use the \fCnovas_inv_max_iter\fP variable declared in \fC\fBnovas\&.c\fP\fP to specify the maximum number of iterations before inverse functions return with an error (with errno set to \fCECANCELED\fP)\&. Users may adjust this limit, if they prefer some other maximum value\&.
.IP "\(bu" 2
Adjusted regression testing to treat \fCnan\fP and \fC-nan\fP effectively the same\&. They both represent an equally invalid result regardless of the sign\&.
.IP "\(bu" 2
The default make target is now \fCdistro\fP\&. It's similar to the deprecated \fCapi\fP target from before except that it skips building \fCstatic\fP libraries and \fCcio_ra\&.bin\fP\&.
.IP "\(bu" 2
\fCmake\fP now generates \fC\&.so\fP shared libraries with \fCSONAME\fP set to \fClib<name>\&.so\&.1\fP where the \fC\&.1\fP indicates that it is major version 1 of the \fCABI\fP\&. All 1\&.x\&.x releases are expected to be ABI compatible with earlier releases\&.
.IP "\(bu" 2
\fClib/*\&.so\fP files are now just symlinks to the actual versioned libraries \fClib/*\&.so\&.1\fP\&. This conforms more closely to what Linux distros expect\&.
.IP "\(bu" 2
Default \fCmake\fP skips \fClocal-dox\fP target unless \fCdoxygen\fP is available (either in the default \fCPATH\fP or else specified via the \fCDOXYGEN\fP variable, e\&.g\&. in \fCconfig\&.mk\fP)\&. This way the default build does not have unexpected dependencies\&. (see Issue #22, thanks to \fC@teuben\fP)\&.
.IP "\(bu" 2
\fCmake\fP can be configured without editing \fCconfig\&.mk\fP simply by setting the appropriate shell variables (the same ones as in \fCconfig\&.mk\fP) prior to invoking \fCmake\fP\&. Standard \fCCC\fP, \fCCPPFLAGS\fP, \fCCFLAGS\fP and \fCLDFLAGS\fP will also be used if defined externally\&.
.IP "\(bu" 2
\fCmake shared\fP now also builds \fClib/libsolsys1\&.so\&.1\fP and \fClib/libsolsys2\&.so\&.1\fP shared libraries that can be used by programs that need solsys1 (via \fCeph_manager\fP) or solsys2 (via \fCjplint\fP) functionality\&.
.IP "\(bu" 2
\fCmake solsys\fP now generates only the \fC\fBsolarsystem()\fP\fP implementation objects that are external (not built in)\&.
.IP "\(bu" 2
Eliminate unchecked return value compiler warnings from \fCcio_file\fP (used typically at build time only to generate \fCcio_ra\&.bin\fP)\&.
.IP "\(bu" 2
\fCjplint\&.f\fP is moved to \fCexamples/\fP since it provides only a default implementation that typically needs to be tweaked for the particualr JPL PLEPH library one intends to use\&.
.IP "\(bu" 2
Doxygen tag file renamed to \fCsupernovas\&.tag\fP for consistency\&.
.IP "\(bu" 2
Initialize test variables for reproducibility
.PP
.SH "[1\&.0\&.1] - 2024-05-13"
.PP
Bug fix release with minor changes\&.
.SS "Fixed"
.IP "\(bu" 2
\fC\fBcirs_to_itrs()\fP\fP, \fC\fBitrs_to_cirs()\fP\fP, \fC\fBtod_to_itrs()\fP\fP, and \fC\fBitrs_to_tod()\fP\fP all had a unit conversion bug in using the \fCut1_to_tt\fP argument [s] when converting TT-based Julian date to UT1-based JD [day] internally\&. (thanks to hannorein)
.IP "\(bu" 2
Fixed errors in \fCexample\&.c\fP [by hannorein]\&.
.PP
.SS "Added"
.IP "\(bu" 2
Added \fC\fBcirs_to_app_ra()\fP\fP and \fC\fBapp_to_cirs_ra()\fP\fP for convenience to convert between right ascensions measured from the CIO (for CIRS) vs measured from the true equinox of date, on the same true equator of date\&.
.PP
.SS "Changed"
.IP "\(bu" 2
Changed definition of \fCNOVAS_AU\fP to the IAU definition of exactly 1\&.495978707e+11 m\&. The old definition is also available as \fCDE405_AU\fP\&. (thanks to hannorein)
.IP "\(bu" 2
Various corrections and changes to documentation\&.
.PP
.SH "[1\&.0\&.0] - 2024-03-01"
.PP
This is the initial release of the SuperNOVAS library\&. Changes are indicated w\&.r\&.t\&. the upstream NOVAS C 3\&.1 library from which SuperNOVAS is forked from\&.
.SS "Fixed"
.IP "\(bu" 2
Fixes the NOVAS C 3\&.1 \fCsidereal_time bug\fP, whereby the \fC\fBsidereal_time()\fP\fP function had an incorrect unit cast\&.
.IP "\(bu" 2
Fixes antedating velocities and distances for light travel time in NOVAS C 3\&.1 \fC\fBephemeris()\fP\fP\&. When getting positions and velocities for Solar-system sources, it is important to use the values from the time light originated from the observed body rather than at the time that light arrives to the observer\&. This correction was done properly for positions, but not for velocities or distances, resulting in incorrect observed radial velocities or apparent distances being reported for spectroscopic observations or for angular-physical size conversions\&.
.IP "\(bu" 2
Fixes NOVAS C 3\&.1 bug in \fC\fBira_equinox()\fP\fP which may return the result for the wrong type of equinox (mean vs\&. true) if the \fCequinox\fP argument was changing from 1 to 0, and back to 1 again with the date being held the same\&. This affected NOVAS C 3\&.1 routines downstream also, such as \fC\fBsidereal_time()\fP\fP\&.
.IP "\(bu" 2
Fixes NOVAS C 3\&.1 accuracy switching bug in \fC\fBcio_basis()\fP\fP, \fC\fBcio_location()\fP\fP, \fC\fBecl2equ()\fP\fP, \fC\fBequ2ecl_vec()\fP\fP, \fC\fBecl2equ_vec()\fP\fP, \fC\fBgeo_posvel()\fP\fP, \fC\fBplace()\fP\fP, and \fC\fBsidereal_time()\fP\fP\&. All these functions returned a cached value for the other accuracy if the other input parameters are the same as a prior call, except the accuracy\&.
.IP "\(bu" 2
Fixes multiple NOVAS C 3\&.1 bugs related to using cached values in \fC\fBcio_basis()\fP\fP with alternating CIO location reference systems\&. This affected many CIRS-based position calculations downstream\&.
.IP "\(bu" 2
Fixes NOVAS C 3\&.1 bug in \fC\fBequ2ecl_vec()\fP\fP and \fC\fBecl2equ_vec()\fP\fP whereby a query with \fCcoord_sys = 2\fP (GCRS) has overwritten the cached mean obliquity value for \fCcoord_sys = 0\fP (mean equinox of date)\&. As a result, a subsequent call with \fCcoord_sys = 0\fP and the same date as before would return the results GCRS coordinates instead of the requested mean equinox of date coordinates\&.
.IP "\(bu" 2
Some remainder calculations in NOVAS C 3\&.1 used the result from \fCfmod()\fP unchecked, which resulted in angles outside of the expected [0:2] range and was also the reason why \fC\fBcal_date()\fP\fP did not work for negative JD values\&.
.IP "\(bu" 2
Fixes NOVAS C 3\&.1 \fC\fBaberration()\fP\fP returning NaN vectors if the \fCve\fP argument is 0\&. It now returns the unmodified input vector appropriately instead\&.
.IP "\(bu" 2
Fixes unpopulated \fCaz\fP output value in \fC\fBequ2hor()\fP\fP at zenith in NOVAS C 3\&.1\&. While any azimuth is acceptable really, it results in unpredictable behavior\&. Hence, we set \fCaz\fP to 0\&.0 for zenith to be consistent\&.
.IP "\(bu" 2
Fixes potential NOVAS C 3\&.1 string overflows and eliminates associated compiler warnings\&.
.IP "\(bu" 2
Fixes the NOVAS C 3\&.1 \fCephem_close bug\fP, whereby \fC\fBephem_close()\fP\fP in \fC\fBeph_manager\&.c\fP\fP did not reset the \fCEPHFILE\fP pointer to NULL\&.
.IP "\(bu" 2
Supports calculations in parallel threads by making cached results thread-local\&.
.PP
.SS "Added"
.IP "\(bu" 2
New debug mode and error traces\&. Simply call \fCnovas_debug(NOVAS_DEBUG_ON)\fP or \fCnovas_debug(NOVAS_DEBUG_EXTRA)\fP to enable\&. When enabled, any error conditions (such as NULL pointer arguments, or invalid input values etc\&.) will be reported to the standard error, complete with call tracing within the SuperNOVAS library, s\&.t\&. users can have a better idea of what exactly did not go to plan (and where)\&. The debug messages can be disabled by passing \fCNOVAS_DEBUF_OFF\fP (0) as the argument to the same call\&.
.IP "\(bu" 2
Added Doxygen markup of source code and header\&.
.IP "\(bu" 2
Added Makefile for GNU make\&.
.IP "\(bu" 2
Added continuous integration on GitHub, including regression testing, static analysis, and doxygen validation\&.
.IP "\(bu" 2
Added an number of precompiler constants and enums in \fC\fBnovas\&.h\fP\fP to promote consistent usage and easier to read code\&.
.IP "\(bu" 2
New runtime configurability:
.IP "  \(bu" 4
The planet position calculator function used by \fC\fBephemeris()\fP\fP can be set at runtime via \fC\fBset_planet_provider()\fP\fP, and \fC\fBset_planet_provider_hp()\fP\fP (for high precision calculations)\&. Similarly, if \fC\fBplanet_ephem_provider()\fP\fP or \fC\fBplanet_ephem_provider_hp()\fP\fP (defined in \fC\fBsolsys-ephem\&.c\fP\fP) are set as the planet calculator functions, then \fC\fBset_ephem_provider()\fP\fP can set the user-specified function to use with these to actually read ephemeris data (e\&.g\&. from a JPL ephemeris file)\&.
.IP "  \(bu" 4
If CIO locations vs GCRS are important to the user, the user may call \fC\fBset_cio_locator_file()\fP\fP at runtime to specify the location of the binary CIO interpolation table (e\&.g\&. \fCcio_ra\&.bin\fP) to use, even if the library was compiled with the different default CIO locator path\&.
.IP "  \(bu" 4
The default low-precision nutation calculator \fC\fBnu2000k()\fP\fP can be replaced by another suitable IAU 2006 nutation approximation via \fC\fBset_nutation_lp_provider()\fP\fP\&. For example, the user may want to use the \fC\fBiau2000b()\fP\fP model instead or some custom algorithm instead\&.
.PP

.IP "\(bu" 2
New intutitive XYZ coordinate conversion functions:
.IP "  \(bu" 4
for GCRS - CIRS - ITRS (IAU 2000 standard): \fC\fBgcrs_to_cirs()\fP\fP, \fC\fBcirs_to_itrs()\fP\fP, and \fC\fBitrs_to_cirs()\fP\fP, \fC\fBcirs_to_gcrs()\fP\fP\&.
.IP "  \(bu" 4
for GCRS - J2000 - TOD - ITRS (old methodology): \fC\fBgcrs_to_j2000()\fP\fP, \fC\fBj2000_to_tod()\fP\fP, \fC\fBtod_to_itrs()\fP\fP, and \fC\fBitrs_to_tod()\fP\fP, \fC\fBtod_to_j2000()\fP\fP, \fC\fBj2000_to_gcrs()\fP\fP\&.
.PP

.IP "\(bu" 2
New \fC\fBitrs_to_hor()\fP\fP and \fC\fBhor_to_itrs()\fP\fP functions to convert Earth-fixed ITRS coordinates to astrometric azimuth and elevation or back\&. Whereas \fC\fBtod_to_itrs()\fP\fP followed by \fC\fBitrs_to_hor()\fP\fP is effectively a just a more explicit 2-step version of the existing \fC\fBequ2hor()\fP\fP for converting from TOD to to local horizontal (old methodology), the \fC\fBcirs_to_itrs()\fP\fP followed by \fC\fBitrs_to_hor()\fP\fP does the same from CIRS (new IAU standard methodology), and had no prior equivalent in NOVAS C 3\&.1\&.
.IP "\(bu" 2
New \fC\fBecl2equ()\fP\fP for converting ecliptic coordinates to equatorial, complementing existing \fC\fBequ2ecl()\fP\fP\&.
.IP "\(bu" 2
New \fC\fBgal2equ()\fP\fP for converting galactic coordinates to ICRS equatorial, complementing existing \fC\fBequ2gal()\fP\fP\&.
.IP "\(bu" 2
New \fC\fBrefract_astro()\fP\fP complements the existing \fC\fBrefract()\fP\fP but takes an unrefracted (astrometric) zenith angle as its argument\&.
.IP "\(bu" 2
New convenience functions to wrap \fC\fBplace()\fP\fP for simpler specific use: \fC\fBplace_star()\fP\fP, \fC\fBplace_icrs()\fP\fP, \fC\fBplace_gcrs()\fP\fP, \fC\fBplace_cirs()\fP\fP, and \fC\fBplace_tod()\fP\fP\&.
.IP "\(bu" 2
New \fC\fBradec_star()\fP\fP and \fC\fBradec_planet()\fP\fP as the common point for existing functions such as \fC\fBastro_star()\fP\fP \fC\fBlocal_star()\fP\fP, \fC\fBvirtual_planet()\fP\fP, \fC\fBtopo_planet()\fP\fP etc\&.
.IP "\(bu" 2
New time conversion utilities \fC\fBtt2tdb()\fP\fP, \fC\fBget_utc_to_tt()\fP\fP, and \fC\fBget_ut1_to_tt()\fP\fP make it simpler to convert between UTC, UT1, TT, and TDB time scales, and to supply \fCut1_to_tt\fP arguments to \fC\fBplace()\fP\fP or topocentric calculations\&.
.IP "\(bu" 2
Co-existing \fC\fBsolarsystem()\fP\fP variants\&. It is possible to use the different \fC\fBsolarsystem()\fP\fP implementations provided by \fC\fBsolsys1\&.c\fP\fP, \fC\fBsolsys2\&.c\fP\fP, \fC\fBsolsys3\&.c\fP\fP and/or \fC\fBsolsys-ephem\&.c\fP\fP side-by-side, as they define their functionalities with distinct, non-conflicting names, e\&.g\&. \fC\fBearth_sun_calc()\fP\fP vs \fC\fBplanet_jplint()\fP\fP vs \fCplanet_eph_manager\fP vs \fC\fBplanet_ephem_provider()\fP\fP\&.
.IP "\(bu" 2
New \fC\fBnovas_case_sensitive(int)\fP\fP to enable (or disable) case-sensitive processing of object names\&. (By default NOVAS \fCobject\fP names are converted to upper-case, making them effectively case-insensitive\&.)
.IP "\(bu" 2
New \fC\fBmake_planet()\fP\fP and \fC\fBmake_ephem_object()\fP\fP to make it simpler to configure Solar-system objects\&.
.PP
.SS "Changed"
.IP "\(bu" 2
Changed to support for calculations in parallel threads by making cached results thread-local (as opposed to the globally cached values in NOVAS C 3\&.1)\&. This works using the C11 standard \fC_Thread_local\fP or else the earlier GNU C >= 3\&.3 standard \fC__thread\fP modifier\&. You can also set the preferred thread-local keyword for your compiler by passing it via \fC-DTHREAD_LOCAL=\&.\&.\&.\fP in \fCconfig\&.mk\fP to ensure that your build is thread-safe\&. And, if your compiler has no support whatsoever for thread_local variables, then SuperNOVAS will not be thread-safe, just as NOVAS C isn't\&.
.IP "\(bu" 2
SuperNOVAS functions take \fCenum\fPs as their option arguments instead of the raw integers in NOVAS C 3\&.1\&. These enums are defined in \fC\fBnovas\&.h\fP\fP\&. The same header also defines a number of useful constants\&. The enums allow for some compiler checking, and make for more readable code that is easier to debug\&. They also make it easy to see what choices are available for each function argument, without having to consult the documentation each and every time\&.
.IP "\(bu" 2
All SuperNOVAS functions check for the basic validity of the supplied arguments (Such as NULL pointers or illegal duplicate arguments) and will return -1 (with \fCerrno\fP set, usually to \fCEINVAL\fP) if the arguments supplied are invalid (unless the NOVAS C API already defined a different return value for specific cases\&. If so, the NOVAS C error code is returned for compatibility)\&. There were no such checks performed in NOVAS C 3\&.1\&.
.IP "\(bu" 2
All erroneous returns now set \fCerrno\fP so that users can track the source of the error in the standard C way and use functions such as \fCperror()\fP and \fCstrerror()\fP to print human-readable error messages\&. (NOVAS C 3\&.1 did not set \fCerrno\fP)\&.
.IP "\(bu" 2
Many output values supplied via pointers are set to clearly invalid values in case of erroneous returns, such as \fCNAN\fP so that even if the caller forgets to check the error code, it becomes obvious that the values returned should not be used as if they were valid\&. (No more sneaky silent errors, which were common in NOVAS C 3\&.1\&.)
.IP "\(bu" 2
Many SuperNOVAS functions allow \fCNULL\fP arguments (unlike NOVAS C 3\&.1), both for optional input values as well as outputs that are not required (see the \fCAPI Documentation\fP for specifics)\&. This eliminates the need to declare dummy variables in your application code for quantities you do not require\&.
.IP "\(bu" 2
All SuperNOVAS functions that take an input vector to produce an output vector allow the output vector argument be the same as the input vector argument (unlike in NOVAS C 3\&.1 where this was not consistently implented)\&. For example, \fCframe_tie(pos, J2000_TO_ICRS, pos)\fP using the same \fCpos\fP vector both as the input and the output\&. In this case the \fCpos\fP vector is modified in place by the call\&. This can greatly simplify usage, and can eliminate extraneous declarations, when intermediates are not required\&.
.IP "\(bu" 2
SuperNOVAS declares function pointer arguments as \fCconst\fP whenever the function does not modify the data content being referenced\&. This supports better programming practices that generally aim to avoid unintended data modifications\&. (The passing of \fCconst\fP arguments to NOVAS C 3\&.1 calls would result in compiler warnings\&.)
.IP "\(bu" 2
Catalog names can be up to 6 bytes (including termination), up from 4 in NOVAS C 3\&.1, while keeping \fCstruct\fP layouts the same as NOVAS C thanks to alignment, thus allowing cross-compatible binary exchange of \fC\fBcat_entry\fP\fP records with NOVAS C 3\&.1\&.
.IP "\(bu" 2
Object ID numbers are \fClong\fP instead of \fCshort\fP (in NOVAS C 3\&.1) to accommodate NAIF IDs, which require minimum 32-bit integers\&.
.IP "\(bu" 2
\fC\fBprecession()\fP\fP can now take arbitrary input and output epochs\&. Unlike NOVAS C 3\&.1, it is not required that either of those epochs be J2000\&.
.IP "\(bu" 2
\fC\fBcel2ter()\fP\fP and \fC\fBter2cel()\fP\fP can now process 'option'/'class' = 1 (\fCNOVAS_REFERENCE_CLASS\fP) regardless of the methodology (\fCEROT_ERA\fP or \fCEROT_GST\fP) used to input or output coordinates in GCRS (unlike in NOVAS C 3\&.1)\&.
.IP "\(bu" 2
Changed \fC\fBmake_object()\fP\fP to retain the specified number argument (which can be different from the \fCstarnumber\fP value in the supplied \fC\fBcat_entry\fP\fP structure), in contrast to NOVAS C 3\&.1, which set \fCobject->number\fP to 0 for \fC\fBcat_entry\fP\fP arguments\&.
.IP "\(bu" 2
\fC\fBcio_location()\fP\fP will always return a valid value as long as neither output pointer argument is NULL\&. (NOVAS C 3\&.1 would return an error if a CIO locator file was previously opened but cannot provide the data for whatever reason)\&.
.IP "\(bu" 2
\fC\fBsun_eph()\fP\fP in \fCsolsysl3\&.c\fP evaluates the series in reverse order compared to NOVAS C 3\&.1, accumulating the least significant terms first, and thus resulting in higher precision result in the end\&.
.IP "\(bu" 2
Changed \fC\fBvector2radec()\fP\fP to return NAN values if the input is a null-vector (i\&.e\&. all components are zero), as opposed to NOVAS C 3\&.1, which left the input vector argument unchanged\&.
.IP "\(bu" 2
IAU 2000A nutation model uses higher-order Delaunay arguments provided by \fC\fBfund_args()\fP\fP, instead of the linear model in NOVAS C 3\&.1\&.
.IP "\(bu" 2
IAU 2000 nutation made a bit faster vs NOVAS C 3\&.1, via reducing the the number of floating-point multiplications necessary by skipping terms that do not contribute\&. Its coefficients are also packed more frugally in memory, resulting in a smaller footprint than in NOVAS C 3\&.1\&.
.IP "\(bu" 2
More efficient paging (cache management) for \fC\fBcio_array()\fP\fP vs NOVAS C 3\&.1, including I/O error checking\&.
.IP "\(bu" 2
Changed the standard atmospheric model for (optical) refraction calculation to include a simple model for the annual average temperature at the site (based on latitude and elevation)\&. This results is a slightly more educated guess of the actual refraction than the global fixed temperature of 10 C assumed by NOVAC C 3\&.1 regardless of observing location\&.
.PP
.SS "Deprecated"
.IP "\(bu" 2
\fC\fBnovascon\&.h\fP\fP / \fC\fBnovascon\&.c\fP\fP: These definitions of constants in NOVAS C 3\&.1 was troublesome for two reasons: (1) They were primarily meant for use internally within the library itself\&. As the library clearly defines in what units input and output quantities are expressed, the user code can apply its own appropriate conversions that need not match the internal system used by the library\&. Hence exposing these constants to users was half baked\&. (2) The naming of constants was too simplistic (with names such as \fCC\fP or \fCF\fP) that it was rather prone to naming conflicts in user code\&. As a result, the constants have been moved to \fC\fBnovas\&.h\fP\fP with more unique names (such as \fCNOVAS_C\fP and \fCNOVAS_EARTH_FLATTENING\fP\&. New code should rely on these definitions instead of the troubled constants of \fC\fBnovascon\&.c\fP\fP / \fC\&.h\fP if at all necessary\&.
.IP "\(bu" 2
\fC\fBequ2hor()\fP\fP: It's name does not make it clear that this function is suitable only for converting TOD (old methodology) to horizontal but not CIRS to horizontal (IAU 2000 standard)\&. You should use the equivalent but more specific \fC\fBtod_to_itrs()\fP\fP or the newly added \fC\fBcirs_to_itrs()\fP\fP, followed by \fC\fBitrs_to_hor()\fP\fP instead\&.
.IP "\(bu" 2
\fC\fBcel2ter()\fP\fP / \fC\fBter2cel()\fP\fP: These NOVAS C 3\&.1 function can be somewhat confusing to use\&. You are likely better off with \fC\fBtod_to_itrs()\fP\fP and \fC\fBcirs_to_itrs()\fP\fP instead, and possibly followed by further conversions if desired\&.
.IP "\(bu" 2
\fC\fBapp_star()\fP\fP, \fC\fBapp_planet()\fP\fP, \fC\fBtopo_star()\fP\fP and \fC\fBtopo_planet()\fP\fP: These NOVAS C 3\&.1 function use the old (pre IAU 2000) methodology, which isn't clear from their naming\&. Use \fC\fBplace()\fP\fP or \fC\fBplace_star()\fP\fP with \fCNOVAS_TOD\fP or \fCNOVAS_CIRS\fP as the system instead, as appropriate\&.
.IP "\(bu" 2
\fC\fBreadeph()\fP\fP: This NOVAS C 3\&.1 function is prone to memory leaks, and not flexible with its origin (necessarily at the barycenter)\&. Instead, use a similar \fCnovas_ephem_provider\fP implementation and \fC\fBset_ephem_provider()\fP\fP for a more flexible and less troublesome equivalent, which also does not need to be baked into the library and can be configured at runtime\&.
.IP "\(bu" 2
\fC\fBtdb2tt()\fP\fP\&. Use \fC\fBtt2tdb()\fP\fP instead\&. It's both more intuitive to use (returning the time difference as a double) and faster to calculate than the NOVAS C function, not to mention that it implements the more standard approach\&. 
.PP

