.TH "src/util.c" 3 "Version v1.3" "SuperNOVAS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/util.c
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "double \fBd_light\fP (const double *pos_src, const double *pos_body)"
.br
.ti -1c
.RI "void \fBnovas_debug\fP (enum \fBnovas_debug_mode\fP mode)"
.br
.RI "========================================================================== "
.ti -1c
.RI "double \fBnovas_equ_sep\fP (double ra1, double dec1, double ra2, double dec2)"
.br
.ti -1c
.RI "enum \fBnovas_debug_mode\fP \fBnovas_get_debug_mode\fP ()"
.br
.ti -1c
.RI "double \fBnovas_norm_ang\fP (double angle)"
.br
.ti -1c
.RI "double \fBnovas_sep\fP (double lon1, double lat1, double lon2, double lat2)"
.br
.ti -1c
.RI "double \fBnovas_vlen\fP (const double *restrict v)"
.br
.ti -1c
.RI "int \fBradec2vector\fP (double ra, double dec, double dist, double *restrict pos)"
.br
.ti -1c
.RI "int \fBspin\fP (double angle, const double *in, double *out)"
.br
.ti -1c
.RI "short \fBvector2radec\fP (const double *restrict pos, double *restrict ra, double *restrict dec)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "int \fBnovas_inv_max_iter\fP = 100"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBDate\fP
.RS 4
Created on Mar 6, 2025 
.RE
.PP
\fBAuthor\fP
.RS 4
G\&. Kaplan and A\&. Kovacs
.RE
.PP
Various commonly used routines used throughout the SuperNOVAS library\&. 
.SH "Function Documentation"
.PP 
.SS "double d_light (const double * pos_src, const double * pos_body)"
Returns the difference in light-time, for a star, between the barycenter of the solar system and the observer (or the geocenter) (\fIUsage A\fP)\&.
.PP
Alternatively (\fIUsage B\fP), this function returns the light-time from the observer (or the geocenter) to a point on a light ray that is closest to a specific solar system body\&. For this purpose, 'pos_src' is the position vector toward observed object, with respect to origin at observer (or the geocenter); 'pos_body' is the position vector of solar system body, with respect to origin at observer (or the geocenter), components in AU; and the returned value is the light time to point on line defined by 'pos' that is closest to solar system body (positive if light passes body before hitting observer, i\&.e\&., if 'pos_body' is within 90 degrees of 'pos_src')\&.
.PP
NOTES: 
.PD 0
.IP "1." 4
This function is called by \fBplace()\fP 
.PP
.PP
\fBParameters\fP
.RS 4
\fIpos_src\fP Position vector towards observed object, with respect to the SSB (\fIUsage A\fP), or relative to the observer / geocenter (\fIUsage B\fP)\&. 
.br
\fIpos_body\fP [AU] Position of observer relative to SSB (\fIUsage A\fP), or position of intermediate solar-system body with respect to the observer / geocenter (\fIUsage B\fP)\&. 
.RE
.PP
\fBReturns\fP
.RS 4
[day] Difference in light time to observer, either relative to SSB (\fIUsage A\fP) or relative intermediate solar-system body (\fIUsage B\fP); or else NAN if either of the input arguments is NULL\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBplace()\fP 
.RE
.PP

.PP
References \fBnovas_vlen()\fP\&.
.SS "void novas_debug (enum \fBnovas_debug_mode\fP mode)"

.PP
========================================================================== Enables or disables reporting errors and traces to the standard error stream\&.
.PP
\fBParameters\fP
.RS 4
\fImode\fP NOVAS_DEBUG_OFF (0; or <0), NOVAS_DEBUG_ON (1), or NOVAS_DEBUG_EXTRA (2; or >2)\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.0 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_get_debug_mode()\fP 
.RE
.PP

.PP
References \fBNOVAS_DEBUG_EXTRA\fP\&.
.SS "double novas_equ_sep (double ra1, double dec1, double ra2, double dec2)"
Returns the angular separation of two equatorial locations on a sphere\&.
.PP
\fBParameters\fP
.RS 4
\fIra1\fP [h] right ascension of first location 
.br
\fIdec1\fP [deg] declination of first location 
.br
\fIra2\fP [h] right ascension of second location 
.br
\fIdec2\fP [deg] declination of second location 
.RE
.PP
\fBReturns\fP
.RS 4
[deg] the angular separation of the two locations\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_sep()\fP 
.PP
\fBnovas_sun_angle()\fP 
.PP
\fBnovas_moon_angle()\fP 
.RE
.PP

.PP
References \fBnovas_sep()\fP\&.
.SS "enum \fBnovas_debug_mode\fP novas_get_debug_mode ()"
Returns the current, thread-local, mode for reporting errors encountered (and traces)\&.
.PP
\fBReturns\fP
.RS 4
The current debug mode in the calling thread\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.0 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_debug()\fP 
.RE
.PP

.SS "double novas_norm_ang (double angle)"
Returns the normalized angle in the [0:2) range\&.
.PP
\fBParameters\fP
.RS 4
\fIangle\fP [rad] an angle in radians\&. 
.RE
.PP
\fBReturns\fP
.RS 4
[rad] the normalized angle in the [0:2) range\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.0 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.PP
References \fBTWOPI\fP\&.
.SS "double novas_sep (double lon1, double lat1, double lon2, double lat2)"
Returns the angular separation of two locations on a sphere\&.
.PP
\fBParameters\fP
.RS 4
\fIlon1\fP [deg] longitude of first location 
.br
\fIlat1\fP [deg] latitude of first location 
.br
\fIlon2\fP [deg] longitude of second location 
.br
\fIlat2\fP [deg] latitude of second location 
.RE
.PP
\fBReturns\fP
.RS 4
[deg] the angular separation of the two locations\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_equ_sep()\fP 
.PP
\fBnovas_sun_angle()\fP 
.PP
\fBnovas_moon_angle()\fP 
.RE
.PP

.SS "double novas_vlen (const double *restrict v)"
(\fIfor internal use only\fP) Calculates the length of a 3-vector
.PP
\fBParameters\fP
.RS 4
\fIv\fP Pointer to a 3-component (x, y, z) vector\&. The argument cannot be NULL 
.RE
.PP
\fBReturns\fP
.RS 4
the length of the vector
.RE
.PP
\fBSee also\fP
.RS 4
vdot() 
.PP
vdist()
.RE
.PP
\fBSince\fP
.RS 4
1\&.0 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs 
.RE
.PP

.SS "int radec2vector (double ra, double dec, double dist, double *restrict pos)"
Converts equatorial spherical coordinates to a vector (equatorial rectangular coordinates)\&.
.PP
\fBParameters\fP
.RS 4
\fIra\fP [h] Right ascension (hours)\&. 
.br
\fIdec\fP [deg] Declination (degrees)\&. 
.br
\fIdist\fP [AU] Distance (AU) 
.br
\fIpos\fP [AU] Position 3-vector, equatorial rectangular coordinates (AU)\&.
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or -1 if the vector argument is NULL\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBvector2radec()\fP 
.PP
\fBstarvectors()\fP 
.RE
.PP

.SS "int spin (double angle, const double * in, double * out)"
Transforms a vector from one coordinate system to another with same origin and axes rotated about the z-axis\&.
.PP
REFERENCES: 
.PD 0
.IP "1." 4
Kaplan, G\&. H\&. et\&. al\&. (1989)\&. Astron\&. Journ\&. 97, 1197-1210\&. 
.PP
.PP
\fBParameters\fP
.RS 4
\fIangle\fP [deg] Angle of coordinate system rotation, positive counterclockwise when viewed from +z, in degrees\&. 
.br
\fIin\fP Input position vector\&. 
.br
\fIout\fP Position vector expressed in new coordinate system rotated about z by 'angle'\&. It can be the same vector as the input\&.
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or -1 if the output vector is NULL\&. 
.RE
.PP

.PP
References \fBTWOPI\fP\&.
.SS "short vector2radec (const double *restrict pos, double *restrict ra, double *restrict dec)"
Converts an vector in equatorial rectangular coordinates to equatorial spherical coordinates\&.
.PP
REFERENCES: 
.PD 0
.IP "1." 4
Kaplan, G\&. H\&. et\&. al\&. (1989)\&. Astron\&. Journ\&. 97, 1197-1210\&. 
.PP
.PP
\fBParameters\fP
.RS 4
\fIpos\fP Position 3-vector, equatorial rectangular coordinates\&. 
.br
\fIra\fP [h] Right ascension in hours [0:24] or NAN if the position vector is NULL or a null-vector\&. It may be NULL if notrequired\&. 
.br
\fIdec\fP [deg] Declination in degrees [-90:90] or NAN if the position vector is NULL or a null-vector\&. It may be NULL if not required\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, -1 of any of the arguments are NULL, or 1 if all input components are 0 so 'ra' and 'dec' are indeterminate, or else 2 if both x and y are zero, but z is nonzero, and so 'ra' is indeterminate\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBradec2vector()\fP 
.RE
.PP

.SH "Variable Documentation"
.PP 
.SS "int novas_inv_max_iter = 100"
Maximum number of iterations for convergent inverse calculations\&. Most iterative inverse functions should normally converge in a handful of iterations\&. In some pathological cases more iterations may be required\&. This variable sets an absolute maximum for the number of iterations in order to avoid runaway (zombie) behaviour\&. If inverse functions faile to converge, they will return a value indicating an error, and errno should be set to ECANCELED\&.
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for SuperNOVAS from the source code\&.
