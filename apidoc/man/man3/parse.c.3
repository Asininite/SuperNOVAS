.TH "src/parse.c" 3 "Version v1.3" "SuperNOVAS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/parse.c
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "double \fBnovas_dms_degrees\fP (const char *restrict dms)"
.br
.ti -1c
.RI "double \fBnovas_hms_hours\fP (const char *restrict hms)"
.br
.ti -1c
.RI "double \fBnovas_parse_degrees\fP (const char *restrict str, char **restrict tail)"
.br
.ti -1c
.RI "double \fBnovas_parse_dms\fP (const char *restrict dms, char **restrict tail)"
.br
.ti -1c
.RI "double \fBnovas_parse_hms\fP (const char *restrict hms, char **restrict tail)"
.br
.ti -1c
.RI "double \fBnovas_parse_hours\fP (const char *restrict str, char **restrict tail)"
.br
.ti -1c
.RI "double \fBnovas_str_degrees\fP (const char *restrict str)"
.br
.ti -1c
.RI "double \fBnovas_str_hours\fP (const char *restrict str)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBDate\fP
.RS 4
Created on Mar 2, 2025 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
Various functions to parse string values for SuperNOVAS\&. 
.SH "Function Documentation"
.PP 
.SS "double novas_dms_degrees (const char *restrict dms)"
Returns the decimal degrees for a DMS string specification\&. The degree, (arc)minute, and (arc)second components may be separated by spaces, tabs, colons \fC:\fP, or a combination thereof\&. Additionally, the degree and minutes may be separated by the letter \fCd\fP, and the minutes and seconds may be separated by \fCm\fP or a single quote `'`\&. The seconds may be followed by 's' or double quote \fC"\fP\&. Finally, the last component may additionally be followed by a standalone upper-case letter 'N', 'E', 'S', or 'W' signifying a compass direction\&.
.PP
For example, all of the lines below are valid specifications:
.PP
.PP
.nf

 -179:59:59\&.999
 -179d 59m 59\&.999s
 -179 59' 59\&.999
 179:59:59\&.999S
 179 59 59\&.999 W
 179_59_59\&.999__S
.fi
.PP
.PP
At least the leading two components (degrees and arcminutes) are required\&. If the arcseconds are ommitted, they will be assumed zero, i\&.e\&. \fC179:59\fP is the same as \fC179:59:00\&.000\fP\&.
.PP
NOTES: 
.PD 0
.IP "1." 4
To see if the string was fully parsed when returning a valid (non-NAN) value, you can check \fCerrno\fP: it should be zero (0) if all non-whitespace characters have been parsed from the input string, or else \fCEINVAL\fP if the parsed value used only the leading part of the string\&. 
.PP
.PP
\fBParameters\fP
.RS 4
\fIdms\fP String specifying degrees, minutes, and seconds, which correspond to an angle\&. Angles in any range are permitted, but the minutes and seconds must be >=0 and <60\&. 
.RE
.PP
\fBReturns\fP
.RS 4
[deg] Corresponding decimal angle value, or else NAN if there was an error parsing the string (errno will be set to EINVAL)\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_str_degrees()\fP 
.PP
\fBnovas_parse_dms()\fP 
.PP
\fBnovas_hms_hours()\fP 
.RE
.PP

.PP
References \fBnovas_parse_dms()\fP\&.
.SS "double novas_hms_hours (const char *restrict hms)"
Returns the decimal hours for a HMS string specification\&. The hour, minute, and second components may be separated by spaces, tabs, colons \fC:\fP, or a combination thereof\&. Additionally, the hours and minutes may be separated by the letter \fCh\fP, and the minutes and seconds may be separated by \fCm\fP or a single quote `'`\&. The seconds may be followed by 's' or double quote \fC"\fP\&.
.PP
For example, all of the lines below specify the same time:
.PP
.PP
.nf

 23:59:59\&.999
 23h 59m 59\&.999s
 23h59'59\&.999
 23 59 59\&.999
 23 59
 23h
.fi
.PP
.PP
At least the leading two components (hours and minutes) are required\&. If the seconds are ommitted, they will be assumed zero, i\&.e\&. \fC23:59\fP is the same as \fC23:59:00\&.000\fP\&.
.PP
NOTES: 
.PD 0
.IP "1." 4
To see if the string was fully parsed when returning a valid (non-NAN) value, you can check \fCerrno\fP: it should be zero (0) if all non-whitespace characters have been parsed from the input string, or else \fCEINVAL\fP if the parsed value used only the leading part of the string\&. 
.PP
.PP
\fBParameters\fP
.RS 4
\fIhms\fP String specifying hours, minutes, and seconds, which correspond to a time between 0 and 24 h\&. Time in any range is permitted, but the minutes and seconds must be >=0 and <60\&. 
.RE
.PP
\fBReturns\fP
.RS 4
[hours] Corresponding decimal time value, or else NAN if there was an error parsing the string (errno will be set to EINVAL)\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_str_hours()\fP 
.PP
\fBnovas_parse_hms()\fP 
.PP
\fBnovas_dms_degrees()\fP 
.RE
.PP

.PP
References \fBnovas_parse_hms()\fP\&.
.SS "double novas_parse_degrees (const char *restrict str, char **restrict tail)"
Parses an angle in degrees from a string that contains either a decimal degrees or else a broken-down DMS representation\&.
.PP
The decimal representation may be followed by a unit designator: 'd', 'dg', 'deg', 'degree', or 'degrees', which will be parsed case-insensitively also, if present\&.
.PP
Both DMS and decimal values may end with a compass direction: \fCN\fP, \fCE\fP, \fCS\fP, or \fCW\fP\&.
.PP
A few examples of angles that may be parsed:
.PP
.PP
.nf

 -179:59:59\&.999
 -179d 59m 59\&.999s
 179 59 59\&.999 S
 179 59 S
 -179\&.99999d
 -179\&.99999
 179\&.99999W
 179\&.99999 deg S
.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIstr\fP The input string that specified an angle either as decimal degrees or as a broken down DMS speficication\&. The decimal value may be followed by the letter \fCd\fP immediately\&. And both the decimal and DMS representation may be ended with a compass direction marker, \fCN\fP, \fCE\fP, \fCS\fP, or \fCW\fP\&. See more in \fC\fBnovas_parse_dms()\fP\fP on acceptable DMS specifications\&. 
.br
\fItail\fP (optional) If not NULL it will be set to the next character in the string after the parsed angle\&. 
.RE
.PP
\fBReturns\fP
.RS 4
[deg] The angle represented by the string, or else NAN if the string could not be parsed into an angle value (errno will indicate the type of error)\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_str_degrees()\fP 
.PP
\fBnovas_parse_dms()\fP 
.PP
\fBnovas_parse_hours()\fP 
.RE
.PP
trailing E compass, handled below
.PP
Punctuation after first character
.PP
References \fBnovas_debug()\fP, \fBNOVAS_DEBUG_OFF\fP, \fBnovas_get_debug_mode()\fP, and \fBnovas_parse_dms()\fP\&.
.SS "double novas_parse_dms (const char *restrict dms, char **restrict tail)"
Parses the decimal degrees for a DMS string specification\&. The degree, (arc)minute, and (arc)second components may be separated by spaces, tabs, colons \fC:\fP, underscore \fC_\fP, or a combination thereof\&. Additionally, the degree and minutes may be separated by the letter \fCd\fP, and the minutes and seconds may be separated by \fCm\fP or a single quote `'`\&. The seconds may be followed by 's' or a double quote \fC"\fP\&. Finally, the last component may additionally be followed by a standalone upper-case letter 'N', 'E', 'S', or 'W' signifying a compass direction\&.
.PP
For example, all of the lines below are valid specifications:
.PP
.PP
.nf

 -179:59:59\&.999
 -179d 59m 59\&.999s
 -179 59' 59\&.999
 179:59:59\&.999S
 179:59:59\&.999 W
 179_59_59\&.999__S
 179 59 S
.fi
.PP
.PP
At least the leading two components (degrees and arcminutes) are required\&. If the arcseconds are ommitted, they will be assumed zero, i\&.e\&. \fC179:59\fP is the same as \fC179:59:00\&.000\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIdms\fP String specifying degrees, minutes, and seconds, which correspond to an angle\&. Angles in any range are permitted, but the minutes and seconds must be >=0 and <60\&. 
.br
\fItail\fP (optional) If not NULL it will be set to the next character in the string after the parsed time\&. 
.RE
.PP
\fBReturns\fP
.RS 4
[deg] Corresponding decimal angle value, or else NAN if there was an error parsing the string (errno will be set to EINVAL)\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_dms_degrees()\fP 
.PP
\fBnovas_parse_degrees()\fP 
.PP
\fBnovas_parse_hms()\fP 
.RE
.PP

.SS "double novas_parse_hms (const char *restrict hms, char **restrict tail)"
Parses the decimal hours for a HMS string specification\&. The hour, minute, and second components may be separated by spaces, tabs, colons \fC:\fP, underscore \fC_\fP, or a combination thereof\&. Additionally, the hours and minutes may be separated by the letter \fCh\fP, and the minutes and seconds may be separated by \fCm\fP or a single quote `'`\&. The seconds may be followed by 's' or double quote \fC"\fP\&.
.PP
For example, all of the lines below are valid specifications:
.PP
.PP
.nf

 23:59:59\&.999
 23h 59m 59\&.999
 23h59'59\&.999
 23 59 59\&.999
 23 59
.fi
.PP
.PP
At least the leading two components (hours and minutes) are required\&. If the seconds are ommitted, they will be assumed zero, i\&.e\&. \fC23:59\fP is the same as \fC23:59:00\&.000\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIhms\fP String specifying hours, minutes, and seconds, which correspond to a time between 0 and 24 h\&. Time in any range is permitted, but the minutes and seconds must be >=0 and <60\&. 
.br
\fItail\fP (optional) If not NULL it will be set to the next character in the string after the parsed time\&. 
.RE
.PP
\fBReturns\fP
.RS 4
[hours] Corresponding decimal time value, or else NAN if there was an error parsing the string (errno will be set to EINVAL)\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_hms_hours()\fP 
.PP
\fBnovas_parse_hours()\fP 
.PP
\fBnovas_parse_dms()\fP 
.RE
.PP

.SS "double novas_parse_hours (const char *restrict str, char **restrict tail)"
Parses a time or time-like angle from a string that contains either a decimal hours or else a broken-down HMS representation\&.
.PP
The decimal representation may be followed by a unit designator: 'h', 'hr', 'hrs', 'hour', or 'hours', which will be parsed case-insensitively also, if present\&.
.PP
A few examples of angles that may be parsed:
.PP
.PP
.nf

 23:59:59\&.999
 23h 59m 59\&.999s
 23h59'59\&.999
 23 59 59\&.999
 23\&.999999h
 23\&.999999 hours
 23\&.999999
.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIstr\fP The input string that specified an angle either as decimal hours or as a broken down HMS speficication\&. The decimal value may be immediately followed by a letter 'h'\&. See more in \fC\fBnovas_parse_hms()\fP\fP on acceptable HMS input specifications\&. 
.br
\fItail\fP (optional) If not NULL it will be set to the next character in the string after the parsed angle\&. 
.RE
.PP
\fBReturns\fP
.RS 4
[h] The time-like value represented by the string, or else NAN if the string could not be parsed into a time-like value (errno will indicate the type of error)\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_str_hours()\fP 
.PP
\fBnovas_parse_hms()\fP 
.PP
\fBnovas_parse_degrees()\fP 
.RE
.PP

.PP
References \fBnovas_debug()\fP, \fBNOVAS_DEBUG_OFF\fP, \fBnovas_get_debug_mode()\fP, and \fBnovas_parse_hms()\fP\&.
.SS "double novas_str_degrees (const char *restrict str)"
Returns an angle parsed from a string that contains either a decimal degrees or else a broken-down DMS representation\&. See \fC\fBnovas_parse_degrees()\fP\fP to see what string representations may be used\&.
.PP
To see if the string was fully parsed when returning a valid (non-NAN) value, you can check \fCerrno\fP: it should be zero (0) if all non-whitespace and punctuation characters have been parsed from the input string, or else \fCEINVAL\fP if the parsed value used only the leading part of the string\&.
.PP
\fBParameters\fP
.RS 4
\fIstr\fP The input string that specified an angle either as decimal degrees or as a broken down DMS speficication\&. The decimal value may be immediately followed by a letter 'd'\&. See more in \fC\fBnovas_parse_degrees()\fP\fP on acceptable input specifications\&. 
.RE
.PP
\fBReturns\fP
.RS 4
[deg] The angle represented by the string, or else NAN if the string could not be parsed into an angle value (errno will indicate the type of error)\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_parse_degrees()\fP 
.PP
\fBnovas_parse_dms()\fP 
.PP
\fBnovas_str_hours()\fP 
.RE
.PP

.PP
References \fBnovas_parse_degrees()\fP\&.
.SS "double novas_str_hours (const char *restrict str)"
Returns a time or time-like angleparsed from a string that contains either a decimal hours or else a broken-down HMS representation\&. See \fC\fBnovas_parse_hours()\fP\fP to see what string representations may be used\&.
.PP
To check if the string was fully parsed when returning a valid (non-NAN) value you can check \fCerrno\fP: it should be zero (0) if all non-whitespace and punctuation characters have been parsed from the input string, or else \fCEINVAL\fP if the parsed value used only the leading part of the string\&.
.PP
\fBParameters\fP
.RS 4
\fIstr\fP The input string that specified an angle either as decimal hours or as a broken down HMS speficication\&. The decimal value may be immediately followed by a letter 'h'\&. See more in \fC\fBnovas_parse_hours()\fP\fP on acceptable input specifications\&. 
.RE
.PP
\fBReturns\fP
.RS 4
[h] The time-like value represented by the string, or else NAN if the string could not be parsed into a time-like value (errno will indicate the type of error)\&.
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_parse_hours()\fP 
.PP
\fBnovas_parse_hms()\fP 
.PP
\fBnovas_str_degrees()\fP 
.RE
.PP

.PP
References \fBnovas_parse_hours()\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for SuperNOVAS from the source code\&.
